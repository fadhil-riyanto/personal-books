<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eli Bendersky's website - Windows</title><link href="https://eli.thegreenplace.net/" rel="alternate"></link><link href="https://eli.thegreenplace.net/feeds/windows.atom.xml" rel="self"></link><id>https://eli.thegreenplace.net/</id><updated>2022-10-04T14:08:24-07:00</updated><entry><title>Announcing pss: a tool for searching inside source code</title><link href="https://eli.thegreenplace.net/2011/10/14/announcing-pss-a-tool-for-searching-inside-source-code" rel="alternate"></link><published>2011-10-14T11:29:30-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2011-10-14:/2011/10/14/announcing-pss-a-tool-for-searching-inside-source-code</id><summary type="html">
        &lt;p&gt;What tool(s) do you use when you need to quickly search through a set of directories recursively, focusing only on C++ source code files (&lt;tt class="docutils literal"&gt;.cpp&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.h&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.hh&lt;/tt&gt; and so on), looking for some string (or regular expression)? Oh, and if this search could also ignore some directories we really …&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;What tool(s) do you use when you need to quickly search through a set of directories recursively, focusing only on C++ source code files (&lt;tt class="docutils literal"&gt;.cpp&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.h&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.hh&lt;/tt&gt; and so on), looking for some string (or regular expression)? Oh, and if this search could also ignore some directories we really don't want to look into, like &lt;tt class="docutils literal"&gt;.svn&lt;/tt&gt;, all the better.&lt;/p&gt;
&lt;p&gt;I think it would be interesting to see what programmers answer to this question. My guess is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Newbies - will have no idea (&amp;quot;err, just manually &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; in each directory?), or tell you to use an IDE &amp;quot;find in files&amp;quot; command.&lt;/li&gt;
&lt;li&gt;Disciples of the Unix way will probably quickly produce a concoction of &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;, connected with pipes and &lt;tt class="docutils literal"&gt;xargs&lt;/tt&gt; (Quiz: what is the shortest such command to answer all the requirements from above?)&lt;/li&gt;
&lt;li&gt;Experienced users will likely pull a ready made &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt; (or batch?) script that does this out of their toolbox, or say they use &lt;a class="reference external" href="http://betterthangrep.com/"&gt;ack&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What is &lt;tt class="docutils literal"&gt;ack&lt;/tt&gt;? Here's a short description taken directly from its home page:&lt;/p&gt;
&lt;blockquote&gt;
ack is a tool like grep, designed for programmers with large trees of heterogeneous source code. ack is written purely in Perl, and takes advantage of the power of Perl's regular expressions.&lt;/blockquote&gt;
&lt;p&gt;Personally, I use ack myself. Or more precisely, have been using it until very recently. That's when I decided to write such a tool myself, &lt;em&gt;in Python&lt;/em&gt;. This tool is called &lt;strong&gt;pss&lt;/strong&gt; and is now &lt;a class="reference external" href="https://github.com/eliben/pss/"&gt;publicly available&lt;/a&gt; (also &lt;a class="reference external" href="http://pypi.python.org/pypi/pss"&gt;on PyPI&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Here are some cool facts about &lt;strong&gt;pss&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It searches directories recursively by default.&lt;/li&gt;
&lt;li&gt;It recognizes known file extensions for source code (for example, &lt;tt class="docutils literal"&gt;.c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;.h&lt;/tt&gt; files for C code) and lets you easily select which files you want to search (whether it's all Python files, all C files, all C &lt;em&gt;and&lt;/em&gt; Python files, etc.)&lt;/li&gt;
&lt;li&gt;You can search for patterns specified with regular expressions, and also use regular expressions to specify the file patterns to look at, in case the defaults aren't enough.&lt;/li&gt;
&lt;li&gt;It ignores some well known temporary files and directories, as well as source-control directories such as &lt;tt class="docutils literal"&gt;.svn&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;.hg&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;It produces a terminal-friendly, &lt;em&gt;colored&lt;/em&gt; output, on Windows too! Color is used to conveniently set apart file names from the matches within them, as well as the matching portion of each line (in case you hate to scan each line looking for the actual matching string).&lt;/li&gt;
&lt;li&gt;It contains a lot of options particularly helpful for searching source code.&lt;/li&gt;
&lt;li&gt;It plays well as part of the Unix command line, with options that make it suitable for taking part in pipe-connected chains, if required.&lt;/li&gt;
&lt;li&gt;All it requires to run (on Linux and Windows, although almost certainly on other platforms as well) is a Python installation (version 2.6 and up, including 3.x).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pss&lt;/strong&gt; clones ack's functionality (implementing most of the features). The reason I decided to write and release it is mainly that Python is my language of choice, and installing Perl to run ack became a chore (chiefly on Windows machines, since on Linux Perl is usually installed by default). Really, the only reason I've been installing Perl on Windows boxes I had to work on in the past couple of years was to enable them to run ack.&lt;/p&gt;
&lt;p&gt;Moreover, &lt;strong&gt;pss&lt;/strong&gt; comes with a terminal-color library built-in, so unlike ack it doesn't require to install any additional modules to nicely color its output on Windows (ack requires &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Win32::Console::ANSI&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;I have some ideas for extending &lt;strong&gt;pss&lt;/strong&gt; with extra features, and wanted to be able to do that in Python, without having to dust off my Perl skills. Other Pythonistas may find &lt;strong&gt;pss&lt;/strong&gt; attractive for the same reason. &lt;strong&gt;pss&lt;/strong&gt; is implemented in a very modular manner - the main script is just a thin wrapper over a library which can be used programmatically for a variety of purposes. In other words, &lt;strong&gt;pss&lt;/strong&gt; is quite hackable.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;pss&lt;/strong&gt; just seemed like a cool project to do. Its existence is not meant to detriment ack in any way. I've been using and enjoying ack for many years - thanks to ack's author Andy Lester for that!&lt;/p&gt;

    </content><category term="misc"></category><category term="Linux"></category><category term="Python"></category><category term="Software &amp; Tools"></category><category term="Windows"></category></entry><entry><title>DLL hell problems with Qt Creator</title><link href="https://eli.thegreenplace.net/2011/07/08/dll-hell-problems-with-qt-creator" rel="alternate"></link><published>2011-07-08T06:06:19-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2011-07-08:/2011/07/08/dll-hell-problems-with-qt-creator</id><summary type="html">
        &lt;p&gt;Yesterday I installed the latest version of the Qt SDK on my home machine (selecting only the desktop version for MinGW in the installation). Then I opened Qt Creator, selected one of the bundled example projects, built it and...&lt;/p&gt;
&lt;img class="align-center" src="https://eli.thegreenplace.net/images/2011/07/lol_horror.jpg" /&gt;
&lt;p&gt;And then I got this error:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;Starting D:\QtSDK\...\debug\mandelbrot …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
        &lt;p&gt;Yesterday I installed the latest version of the Qt SDK on my home machine (selecting only the desktop version for MinGW in the installation). Then I opened Qt Creator, selected one of the bundled example projects, built it and...&lt;/p&gt;
&lt;img class="align-center" src="https://eli.thegreenplace.net/images/2011/07/lol_horror.jpg" /&gt;
&lt;p&gt;And then I got this error:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;Starting D:\QtSDK\...\debug\mandelbrot.exe...
D:\QtSDK\...\debug\mandelbrot.exe exited with code -1073741511
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-1073741511&lt;/span&gt;&lt;/tt&gt; is just an obscene way of saying &lt;tt class="docutils literal"&gt;0xC0000139&lt;/tt&gt;, which on Windows means that some function wasn't found in a DLL. So this is Windows DLL hell (who would've thought...).&lt;/p&gt;
&lt;p&gt;Naturally, I first suspected that Qt Creator is the culprit here. This is because when I went to directory this executable was created in and copied the relevant DLLs into it, it worked. So I started digging around the project settings in Qt Creator, but it appeared that it set up the &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; correctly to point to the installed Qt and MinGW runtime DLLs. Furthermore, it was properly appending to the beginning of &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt;, so other versions of Qt potentially installed elsewhere couldn't affect it. Or could they?&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/ms682586%28v=vs.85%29.aspx"&gt;DLL search order&lt;/a&gt; on Windows, whichever way it is configured, always looks in the system and windows directories &lt;em&gt;before&lt;/em&gt; it looks at the dirs on &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt;. Indeed, when I went to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c:\WINDOWS\system32&lt;/span&gt;&lt;/tt&gt;, I was surprised (and delighted) to find a few stray Qt DLLs in there. Deleting them solved the problem!&lt;/p&gt;
&lt;p&gt;The morale of the story: always think about the &amp;quot;DLL search order&amp;quot; when debugging problems like this. &lt;a class="reference external" href="http://www.dependencywalker.com/"&gt;Dependency walker&lt;/a&gt; can help greatly here too. If your executable finds a DLL somewhere you wouldn't expect it to, &lt;tt class="docutils literal"&gt;depends&lt;/tt&gt; will tell you about it.&lt;/p&gt;
&lt;p&gt;P.S. How did the debug DLLs of Qt get into my &lt;tt class="docutils literal"&gt;system32&lt;/tt&gt;? Either some application put them there during installation (a bad, bad thing to do), or I put them there for some obscure testing purpose a while ago and forgot all about them. Therefore, another morale of the story: never, &lt;em&gt;EVER&lt;/em&gt;, put stuff in &lt;tt class="docutils literal"&gt;system32&lt;/tt&gt;. Just distribute your DLLs in the same directory with the executable. Modern hard-drives are large enough to make the storage savings of DLL sharing negligible.&lt;/p&gt;

    </content><category term="misc"></category><category term="C &amp; C++"></category><category term="Qt"></category><category term="Windows"></category></entry><entry><title>Problem passing arguments to Python scripts on Windows</title><link href="https://eli.thegreenplace.net/2010/12/14/problem-passing-arguments-to-python-scripts-on-windows" rel="alternate"></link><published>2010-12-14T20:32:25-08:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2010-12-14:/2010/12/14/problem-passing-arguments-to-python-scripts-on-windows</id><summary type="html">
        &lt;p&gt;This is a problem I encountered more than once, and today I finally found a &amp;quot;solution&amp;quot;. I place &amp;quot;solution&amp;quot; in quotes because it's more of a workaround for something that seems to be a problem of the Python Windows installer.&lt;/p&gt;
&lt;p&gt;I ran into the problem on a Windows 7 box …&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;This is a problem I encountered more than once, and today I finally found a &amp;quot;solution&amp;quot;. I place &amp;quot;solution&amp;quot; in quotes because it's more of a workaround for something that seems to be a problem of the Python Windows installer.&lt;/p&gt;
&lt;p&gt;I ran into the problem on a Windows 7 box running ActivePython 2.6, but according to this &lt;a class="reference external" href="http://bugs.python.org/issue7936"&gt;Python issue&lt;/a&gt;, others have encountered the problem with Windows XP and Python 3.x as well.&lt;/p&gt;
&lt;p&gt;The problem manifests itself as follows. Prepare a simple script containing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00007f"&gt;sys&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;print&lt;/span&gt; sys.argv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Execute it from the command-line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt;python z.py 1 2 3
[&amp;#39;z.py&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks right. But now execute it without prepending &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt;z.py 1 2 3
[&amp;#39;C:\\z.py&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What gives? Doesn't the installer configure &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.py&lt;/span&gt;&lt;/tt&gt; files to be run by the Python executable correctly, passing arguments to it as one would expect?&lt;/p&gt;
&lt;p&gt;Now, I found a couple of non-solutions. The most popular was to setup the association with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;assoc&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ftype&lt;/span&gt;&lt;/tt&gt; commands, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt;ftype Python26.File=&amp;quot;C:\Python26\python.exe&amp;quot; &amp;quot;%1&amp;quot; %*
C:\&amp;gt;assoc .py=Python26.File
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But at no avail, the problem persisted.&lt;/p&gt;
&lt;p&gt;What eventually solved it is fixing the relevant registry keys for Python. I set the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;HKEY_CLASSES_ROOT\Applications\python26.exe\shell\open\command&lt;/span&gt;&lt;/tt&gt; key to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;C:\Python26\python26.exe&amp;quot; &amp;quot;%1&amp;quot; %*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;%*&lt;/span&gt;&lt;/tt&gt; was missing. Similarly, I set &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;HKEY_CLASSES_ROOT\py_auto_file\shell\open\command&lt;/span&gt;&lt;/tt&gt; to the same value. You can also set it accordingly for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python26w.exe&lt;/span&gt;&lt;/tt&gt; (the no-shell version of Python on Windows).&lt;/p&gt;
&lt;p&gt;This worked, and now I got:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\&amp;gt;z.py 1 2 3
[&amp;#39;C:\\z.py&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What causes the problem? In all likeness the ActivePython 2.6 installer, which doesn't set up the registry keys correctly. Now, this may not always happen, and some discussions point to it being dependent on other factors. For instance, I had another version of Python already installed on the machine when I executed the installer - this may have confused it.&lt;/p&gt;

    </content><category term="misc"></category><category term="Python"></category><category term="Windows"></category></entry><entry><title>How to find out whether your Windows 7 is 64-bit</title><link href="https://eli.thegreenplace.net/2010/10/09/how-to-find-out-whether-your-windows-7-is-64-bit" rel="alternate"></link><published>2010-10-09T11:56:11-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2010-10-09:/2010/10/09/how-to-find-out-whether-your-windows-7-is-64-bit</id><summary type="html">
        &lt;p&gt;One way is in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Control&lt;/span&gt; &lt;span class="pre"&gt;Panel&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;System&lt;/span&gt;&lt;/tt&gt;. Direct link to place in explorer's address bar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Control Panel\All Control Panel Items\System
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There, under &amp;quot;System&amp;quot; you can see a field called &amp;quot;System type&amp;quot; which will say whether the OS is 32-bit or 64-bit.&lt;/p&gt;
&lt;p&gt;Another way is to use the command-line …&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;One way is in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Control&lt;/span&gt; &lt;span class="pre"&gt;Panel&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;System&lt;/span&gt;&lt;/tt&gt;. Direct link to place in explorer's address bar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Control Panel\All Control Panel Items\System
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There, under &amp;quot;System&amp;quot; you can see a field called &amp;quot;System type&amp;quot; which will say whether the OS is 32-bit or 64-bit.&lt;/p&gt;
&lt;p&gt;Another way is to use the command-line interface to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Windows_Management_Instrumentation"&gt;WMI&lt;/a&gt;. Execute &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cmd&lt;/span&gt;&lt;/tt&gt; and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\username&amp;gt;wmic OS get OSArchitecture
OSArchitecture
64-bit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it shows 64-bit for me.&lt;/p&gt;

    </content><category term="misc"></category><category term="Windows"></category></entry></feed>