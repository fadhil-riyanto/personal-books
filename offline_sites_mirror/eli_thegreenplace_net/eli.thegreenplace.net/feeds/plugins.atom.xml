<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eli Bendersky's website - Plugins</title><link href="https://eli.thegreenplace.net/" rel="alternate"></link><link href="https://eli.thegreenplace.net/feeds/plugins.atom.xml" rel="self"></link><id>https://eli.thegreenplace.net/</id><updated>2024-09-09T15:50:00-07:00</updated><entry><title>Plugins case study: Envoy WASM extensions</title><link href="https://eli.thegreenplace.net/2023/plugins-case-study-envoy-wasm-extensions/" rel="alternate"></link><published>2023-06-03T15:14:00-07:00</published><updated>2024-02-29T13:32:33-08:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2023-06-03:/2023/plugins-case-study-envoy-wasm-extensions/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.envoyproxy.io/"&gt;Envoy&lt;/a&gt; is a configurable proxy that serves
a prominent role in modern cloud-native projects; for example, it's
used in many k8s deployments to provide inter-service communication (through
Istio). In this post, I'd like to describe Envoy's extension mechanism as a case
study of using WebAssembly for plugins.&lt;/p&gt;
&lt;div class="section" id="some-background"&gt;
&lt;h2&gt;Some background&lt;/h2&gt;
&lt;p&gt;Imagine â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.envoyproxy.io/"&gt;Envoy&lt;/a&gt; is a configurable proxy that serves
a prominent role in modern cloud-native projects; for example, it's
used in many k8s deployments to provide inter-service communication (through
Istio). In this post, I'd like to describe Envoy's extension mechanism as a case
study of using WebAssembly for plugins.&lt;/p&gt;
&lt;div class="section" id="some-background"&gt;
&lt;h2&gt;Some background&lt;/h2&gt;
&lt;p&gt;Imagine a complex service-based infrastructure, in which service A has to
communicate with service B. This is typically done via HTTP/REST or some RPC
mechanism, but there are a lot of complex networking details to deal with:
service discovery (I just want to send a message to an instance of service B,
but which address/port is it on?), load balancing, retries, etc. Instead of
having each service deal with this complexity, we can set up Envoy to run as a
sidecar, and ask it to handle all of it. Then the actual services can focus on
our business logic.&lt;/p&gt;
&lt;p&gt;Here's a handy diagram from &lt;a class="reference external" href="https://istio.io"&gt;https://istio.io&lt;/a&gt; that demonstrates this (Envoy is
the &lt;em&gt;Proxy&lt;/em&gt; boxes):&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/2023/envoyarch.svg" style="width: 600px;" type="image/svg+xml"&gt;System diagram of envoy proxies communicating for microservices&lt;/object&gt;
&lt;p&gt;As expected - for such a sophisticated piece of software - Envoy users
frequently need to customize it in various ways for their projects. For example,
we may want to define &lt;a class="reference external" href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/listener_filters#arch-overview-network-filters"&gt;custom filters&lt;/a&gt;;
this is a kind of middleware.&lt;/p&gt;
&lt;p&gt;Envoy's original approach to extensions was to support writing C++ to link
custom filters with Envoy itself. This, of course, is awkward for many reasons -
such as having to distribute your own Envoy binaries instead of using the
standard ones. Also, the filter API was not really designed to be stable so
keeping up with changes was an issue; and finally, few people like writing C++
these days.&lt;/p&gt;
&lt;p&gt;So the Envoy team came up with an alternative approach:
&lt;a class="reference external" href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter"&gt;Lua extensions&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Lua programming language logo" class="align-center" src="https://eli.thegreenplace.net/images/2023/lua-logo.png" style="width: 200px;" /&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lua_(programming_language)"&gt;Lua programming language&lt;/a&gt; was designed
for extensions and plugins; it's a small and simple language, and its
implementation is also small and simple - making it easy to embed. You can write
some Lua code either directly in your configuration file or a separate file it
points to, and there's an API exposed to Lua that the extension can interact
with.&lt;/p&gt;
&lt;p&gt;The Lua extension method is fully supported in Envoy and is currently in
a &lt;em&gt;stable&lt;/em&gt; state, but some folks weren't too keen on learning yet another
programming language just for the sake of writing filters for their proxy. Lua
is not particularly prominent in the Cloud world (which is mostly dominated
by Go, Python, Java and some other languages). Therefore, the Envoy maintainers
have created yet another way to extend it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; - with WebAssembly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wasm-extensions"&gt;
&lt;h2&gt;WASM extensions&lt;/h2&gt;
&lt;p&gt;WASM extensions are still experimental in Envoy at the time of writing, but
it's an intriguing approach and the main subject of this post. WASM elegantly
solves the problems of the other extension methods as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The WASM extension is compiled into a &lt;tt class="docutils literal"&gt;.wasm&lt;/tt&gt; file that the Envoy config
can point at, and is loaded dynamically at runtime. It doesn't require
recompiling and distributing a custom version of Envoy.&lt;/li&gt;
&lt;li&gt;The extension can use any programming language that compiles down to WASM,
and that covers &lt;em&gt;a lot&lt;/em&gt; of languages these days.
Your entire service infrastructure is written in Go and you don't want to
wrangle C++ or learn Lua just for the proxy filters? No problem - Go compiles
to WASM and there's even &lt;a class="reference external" href="https://github.com/tetratelabs/proxy-wasm-go-sdk"&gt;an SDK&lt;/a&gt;
to help writing Envoy filters in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To this end, Envoy embeds &lt;a class="reference external" href="https://v8.dev/"&gt;v8&lt;/a&gt; as a WASM VM. All that
remains is to define the interface between these WASM extension modules and
Envoy itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-proxy-wasm-abi"&gt;
&lt;h2&gt;The Proxy-Wasm ABI&lt;/h2&gt;
&lt;p&gt;WebAssembly itself defines:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A bytecode format (with an equivalent &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/webassembly-text-code-samples/"&gt;text format&lt;/a&gt;)
and its execution semantics&lt;/li&gt;
&lt;li&gt;A way for WASM modules to export functions and data to the host environment&lt;/li&gt;
&lt;li&gt;A way for WASM modules to import functions and data from the host environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that's about it. Everything else is left to the specific system implementer
to figure out. Moreover, the data types WASM supports are very limited -
essentially fixed-width integers and floats; users are expected to build
their own higher-level data structures on top of these using addresses into
WASM's linear heap memory, if needed.&lt;/p&gt;
&lt;p&gt;In a &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/faas-in-go-with-wasm-wasi-and-rust/"&gt;previous post&lt;/a&gt; I've
talked about WASI - an API and ABI that enables OS-like functionality in WASM
code. While WASI is useful for exposing WASM modules to the outside world in
a vetted way, it's somewhat limited for complex host-wasm interactions, because
at the moment the only way for this to happen is via interfaces like
stdin/stdout &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, systems that require sophisticated interactions between the host
and WASM extensions are left to define their own interfaces. Which is exactly
what the Envoy developers ended up creating: the &lt;a class="reference external" href="https://github.com/proxy-wasm/spec"&gt;Proxy-Wasm
ABI&lt;/a&gt; &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The ABI is fairly low level, and it has two parts. One is
&lt;strong&gt;Functions implemented in the WASM module&lt;/strong&gt;. These are functions exported from
WASM (the custom extension) and imported by the host (Envoy or another proxy).
For example, &lt;tt class="docutils literal"&gt;proxy_on_request_headers&lt;/tt&gt; is exported by the WASM module as
a callback to handle headers for HTTP requests sailing through the proxy.&lt;/p&gt;
&lt;p&gt;This is the signature of &lt;tt class="docutils literal"&gt;proxy_on_request_headers&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;params:
    i32 (uint32_t) context_id
    i32 (size_t) num_headers
    i32 (bool) end_of_stream
returns:
    i32 (proxy_action_t) next_action
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The import is done in the &lt;a class="reference external" href="https://github.com/proxy-wasm/proxy-wasm-cpp-host/"&gt;proxy-wasm-cpp-host&lt;/a&gt; project
which is a dependency of Envoy. This project implements the host side of
Proxy-wasm for C++ hosts.&lt;/p&gt;
&lt;p&gt;What should the extension do within &lt;tt class="docutils literal"&gt;proxy_on_request_headers&lt;/tt&gt;, though? It
can do things like ask Envoy about the actual HTTP headers it sees with
&lt;tt class="docutils literal"&gt;proxy_get_header_map_value&lt;/tt&gt;. This is in the second part of the ABI,
&lt;strong&gt;Functions implemented in the host environment&lt;/strong&gt;. Its signature is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;params:
    i32 (proxy_map_type_t) map_type
    i32 (const char*) key_data
    i32 (size_t) key_size
    i32 (const char**) return_value_data
    i32 (size_t*) return_value_size
returns:
    i32 (proxy_result_t) call_result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see this is &lt;em&gt;a very low level ABI&lt;/em&gt;; all parameters are either
pointers (addresses in WASM's linear memory) or constants of predefined types.
Since WASM severely restricts the types of function parameters and return
values, and both the WASM module and the host can be implemented in very diverse
programming languages, there's not much choice here. Writing the glue code on
the WASM-host interface is tedious and low-level.&lt;/p&gt;
&lt;p&gt;This is where the high-level SDKs come in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-go-sdk-for-proxy-wasm"&gt;
&lt;h2&gt;The Go SDK for Proxy-wasm&lt;/h2&gt;
&lt;p&gt;Suppose we're writing our Envoy extension module in Go (a reasonable choice
given the dominance of Go in the Cloud Native / k8s / Istio ecosystem). It
seems like hooking up a simple extension to snoop on all the HTTP traffic
going through the proxy and logging the HTTP headers is quite a bit of work.&lt;/p&gt;
&lt;p&gt;Luckily, the good folks at Tetrate created the &lt;a class="reference external" href="https://github.com/tetratelabs/proxy-wasm-go-sdk/"&gt;Go SDK for Proxy-Wasm&lt;/a&gt;. This SDK handles all
the Proxy-Wasm ABI mechanics and presents a clean, pure Go API to extension
writers that won't have to worry about low level WASM details.&lt;/p&gt;
&lt;p&gt;Here's how the task of &amp;quot;snoop on HTTP traffic and log headers&amp;quot;
&lt;a class="reference external" href="https://github.com/tetratelabs/proxy-wasm-go-sdk/blob/main/examples/http_headers/main.go"&gt;looks using the Go SDK&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;httpHeaders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OnHttpRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numHeaders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;endOfStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;proxywasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetHttpRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxywasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LogCriticalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed to get request headers: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;proxywasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LogInfof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request header --&amp;gt; %s: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ActionContinue&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's explore how both sides of the ABI (host-implemented and
module-implemented) are handled by the Go SDK. Starting with the WASM-calls-host
side, this is &lt;tt class="docutils literal"&gt;proxywasm.GetHttpRequestHeaders&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GetHttpRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MapTypeHttpRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's just a wrapper around a more general &lt;tt class="docutils literal"&gt;getMap&lt;/tt&gt; function with a map type
that the ABI defines. The return type is a slice of 2-element arrays
(key/value).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MapType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rvs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProxyGetHeaderMapPairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;rvs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusOK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusToError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ErrorStatusNotFound&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;bs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RawBytePtrToByteSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rvs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeserializeMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;internal.ProxyGetHeaderMapPairs&lt;/tt&gt; is actually an ABI-defined function that's
imported from the host (as &lt;tt class="docutils literal"&gt;proxy_get_header_map_pairs&lt;/tt&gt;). It writes raw
pointers to its output parameters, so the rest of &lt;tt class="docutils literal"&gt;getMap&lt;/tt&gt; deals with
converting those into Go data types.&lt;/p&gt;
&lt;p&gt;On the host side, &lt;tt class="docutils literal"&gt;proxy_get_header_map_pairs&lt;/tt&gt; is mapped to a
C++ function &lt;a class="reference external" href="https://github.com/proxy-wasm/proxy-wasm-cpp-host/blob/e1fe5e99eedfb517bea92aee3f13f442d4bfa3b4/src/exports.cc#L1"&gt;in this file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now the host-calls-WASM side. The Go SDK has the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//export proxy_on_request_headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;proxyOnRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numHeaders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;endOfStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;recordTiming&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logTiming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;proxyOnRequestHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpContexts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;contextID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;invalid context on proxy_on_request_headers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setActiveContextID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnHttpRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numHeaders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;endOfStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;tt class="docutils literal"&gt;//export&lt;/tt&gt; annotation that tells the compiler to export this function
from the WASM module. To be clear, the entire SDK - along with our custom code -
gets compiled into a &lt;tt class="docutils literal"&gt;.wasm&lt;/tt&gt; file that the host loads, and the &lt;tt class="docutils literal"&gt;//export&lt;/tt&gt;
tag makes the Go compiler place this function in the WASM function export
table that the host has access to.&lt;/p&gt;
&lt;p&gt;Once the host invokes it, it calls the &lt;tt class="docutils literal"&gt;OnHttpRequestHeaders&lt;/tt&gt; method on the
context, which is user-defined as shown above. Hopefully this example gives a
taste of what the SDK does for us - it provides a higher-level,
language-idiomatic API on top of a low-level, language-agnostic ABI.&lt;/p&gt;
&lt;p&gt;The Go SDK is just an example; there are other SDKs that exist for developing
WASM extensions for Envoy - for example in Rust or in C++.&lt;/p&gt;
&lt;p&gt;One small wrinkle in this story is that the Go SDK only supports the &lt;a class="reference external" href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; compiler at this time, not the default Go toolchain.
This is because the default toolchain doesn't have sufficient WASM support yet,
but this situation is changing; in Go 1.21 it has added WASI support and work
is ongoing on additional features that should make it possible to develop
Envoy extensions using the standard toolchain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fundamental-plugin-concepts-in-this-case-study"&gt;
&lt;h2&gt;Fundamental plugin concepts in this case study&lt;/h2&gt;
&lt;p&gt;Let's see how this case study of Envoy extensions with WASM measures against the
&lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;Fundamental plugin concepts&lt;/a&gt;
that were covered &lt;a class="reference external" href="https://eli.thegreenplace.net/tag/plugins"&gt;several times on this blog&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="discovery"&gt;
&lt;h3&gt;Discovery&lt;/h3&gt;
&lt;p&gt;Envoy &amp;quot;discovers&amp;quot; available extensions trivially, because they have to be
explicitly specified in its configuration file. The config file lists the
extensions and where to find them; for WASM, this could be either a local
&lt;tt class="docutils literal"&gt;.wasm&lt;/tt&gt; file or a URL pointing to a file stored remotely (e.g. some
cloud storage bucket).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="registration"&gt;
&lt;h3&gt;Registration&lt;/h3&gt;
&lt;p&gt;The WASM extension registers functionality with Envoy by exporting certain
functions from the WASM module. When Envoy loads an extension, it scans the list
of exported functions for known names. For example, if the extension exports
&lt;tt class="docutils literal"&gt;proxy_on_request_headers&lt;/tt&gt;, Envoy will call it for HTTP headers. If the
extension doesn't export such a function, Envoy will assume it's not interested
in this particular callback.&lt;/p&gt;
&lt;p&gt;Another interesting example of how this functionality is used is the
&lt;tt class="docutils literal"&gt;proxy_abi_version_X_Y_Z&lt;/tt&gt; function. An extension will
export this function with an actual ABI version replacing X, Y an Z. Envoy
will look for a function with the &lt;tt class="docutils literal"&gt;proxy_abi_version_*&lt;/tt&gt; prefix, and from its
name will determine which version of the ABI the WASM module was compiled
against.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hooks"&gt;
&lt;h3&gt;Hooks&lt;/h3&gt;
&lt;p&gt;This is mostly covered in the previous section. There are multiple callbacks
a WASM extension can register by exporting them from the WASM module;
&lt;tt class="docutils literal"&gt;proxy_on_request_headers&lt;/tt&gt; is one example out of many defined in the ABI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exposing-an-application-api-to-plugins"&gt;
&lt;h3&gt;Exposing an application API to plugins&lt;/h3&gt;
&lt;p&gt;This is the &lt;strong&gt;Functions implemented in the host environment&lt;/strong&gt; part of the
Proxy-Wasm ABI; we've seen an example of one of them -
&lt;tt class="docutils literal"&gt;proxy_get_header_map_pairs&lt;/tt&gt;. The ABI defines others, like &lt;tt class="docutils literal"&gt;proxy_log&lt;/tt&gt; for
emitting log messages to Envoy's log. These functions let extensions call
into Envoy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see from the string of posts this year, I'm pretty excited about
the non-browser uses of WASM, particularly in the area of plugins.
The &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/faas-in-go-with-wasm-wasi-and-rust/"&gt;FAAS post&lt;/a&gt; presented one interesting
possibility - using the current (limited but functional) WASI for the
host/plugin interface.&lt;/p&gt;
&lt;p&gt;What this post shows is a case study of a much more advanced extension system;
the capabilities and performance requirements of custom network filter plugins
are just way beyond what WASI can provide, so the Envoy developers ended up
creating their own ABI. It's fascinating to study how such an ABI affects plugin
development and what kind of ecosystem it spawns.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that I'm not trying to criticize the existing extension mechanisms
in Envoy in any way. Both work, and are used to solve real business
problems. As a project like Envoy grows in popularity and usage, it's
inevitable that it will spawn more options for different people to
accomplish their tasks with it. Such is the way of software.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The WASI folks are working on extensions to allow sockets and also
more complex data to be shared between WASM and hosts in an RPC-like
manner; this may enable greatly improved wasm-host interfaces in the
future.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;This all sounds great - the way things should be - until reality kicks
in. While doing research for this post I discovered that the Proxy-wasm
ABI, while clearly and carefully specified, is in-fact
&lt;a class="reference external" href="https://github.com/proxy-wasm/spec/issues/36"&gt;out of date&lt;/a&gt; and
the &amp;quot;real&amp;quot; definition lives within the Envoy source code. It's yet
another case of &amp;quot;the ABI is whatever its main implementation does&amp;quot;, even
though other proxies implement it already
(&lt;a class="reference external" href="https://github.com/mosn/mosn"&gt;MOSN&lt;/a&gt; for example).&lt;/p&gt;
&lt;p&gt;This is especially often the case in my favorite domain - systems
programming. &lt;em&gt;Sigh&lt;/em&gt;, such is life. The rest of the post talks about
the &lt;em&gt;de-facto&lt;/em&gt; specification, relying on the Envoy source code more
than the written down ABI. Hopefully at some future point the ABI is
updated and I can rewrite this footnote.&lt;/p&gt;
&lt;p class="last"&gt;A shout out to &lt;a class="reference external" href="https://github.com/codefromthecrypt"&gt;Adrian Cole&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/mathetake"&gt;Takeshi Yoneda&lt;/a&gt; for
confirming these findings, and the useful chats about all things WASM,
WASI and Go in general.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Plugins"></category><category term="WebAssembly"></category><category term="C &amp; C++"></category></entry><entry><title>FAAS in Go with WASM, WASI and Rust</title><link href="https://eli.thegreenplace.net/2023/faas-in-go-with-wasm-wasi-and-rust/" rel="alternate"></link><published>2023-05-06T06:44:00-07:00</published><updated>2024-09-09T15:50:00-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2023-05-06:/2023/faas-in-go-with-wasm-wasi-and-rust/</id><summary type="html">&lt;p&gt;This post is best described as a technology demonstration; it melds together
web servers, plugins, WebAssembly, Go, Rust and ABIs. Here's what it shows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to load WASM code with WASI in a Go environment and hook it up to a web
server.&lt;/li&gt;
&lt;li&gt;How to implement web server plugins in â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This post is best described as a technology demonstration; it melds together
web servers, plugins, WebAssembly, Go, Rust and ABIs. Here's what it shows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to load WASM code with WASI in a Go environment and hook it up to a web
server.&lt;/li&gt;
&lt;li&gt;How to implement web server plugins in any language that can be compiled to
WASM.&lt;/li&gt;
&lt;li&gt;How to translate Go programs into WASM that uses WASI.&lt;/li&gt;
&lt;li&gt;How to translate Rust programs into WASM that uses WASI.&lt;/li&gt;
&lt;li&gt;How to write WAT (WebAssembly Text) code that uses WASI to interact with
a non-JS environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We're going to build a simple &lt;strong&gt;FAAS&lt;/strong&gt; (Function as a Service) server in Go
that lets us write &lt;em&gt;modules&lt;/em&gt; in any language that has a WASM
target. Comparing to existing technologies, it's something
between GCP's &lt;a class="reference external" href="https://cloud.google.com/functions"&gt;Cloud Functions&lt;/a&gt;, &lt;a class="reference external" href="https://cloud.google.com/run"&gt;Cloud
Run&lt;/a&gt; and good old &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;CGI&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;Let's start with a high-level diagram describing how the system works:&lt;/p&gt;
&lt;img alt="Diagram showing flow of events in this program, also described below" class="align-center" src="https://eli.thegreenplace.net/images/2023/wasm-faas.png" /&gt;
&lt;p&gt;The steps numbered in the diagram are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The FAAS server receives an &lt;tt class="docutils literal"&gt;HTTP GET&lt;/tt&gt; request, with a path consisting of
a module name (&lt;tt class="docutils literal"&gt;func&lt;/tt&gt; in the example in the diagram) and an arbitrary
query string.&lt;/li&gt;
&lt;li&gt;The FAAS server finds and loads the WASM module corresponding to the module
name it was provided, and invokes it with a description of the HTTP request.&lt;/li&gt;
&lt;li&gt;The module emits output to its stdout, which is captured by the FAAS server.&lt;/li&gt;
&lt;li&gt;The FAAS server uses the module's stdout as the contents of an HTTP Response
to the request it received.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-faas-server"&gt;
&lt;h2&gt;The FAAS server&lt;/h2&gt;
&lt;p&gt;We'll start our deep dive with the FAAS server itself (&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/wasm-faas"&gt;full code here&lt;/a&gt;). The
HTTP handling part is straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;httpHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;want /{modulename} prefix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module %v requested with query %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http_method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http_host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http_query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RemoteAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;modpath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;target/%v.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loading module %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;invokeWasmModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error loading module %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to find module &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;modpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// The module&amp;#39;s stdout is written into the response.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;httpHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This server listens on port 8080 (feel free to change this or make it
more configurable), and registers a catch-all handler for the root path. The
handler parses the actual request URL to find the module name. It then stores
some information to pass to the loaded module in the &lt;tt class="docutils literal"&gt;env&lt;/tt&gt; map.&lt;/p&gt;
&lt;p&gt;The loaded module is found with a filesystem lookup in the &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; directory
relative to the FAAS server binary. All of this is just for demonstration
purposes and can be easily changed, of course. The handler then calls
&lt;tt class="docutils literal"&gt;invokeWasmModule&lt;/tt&gt;, which we'll get to shortly. This function returns the
invoked module's stdout, which the handler prints out into the HTTP response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-wasm-code-in-go"&gt;
&lt;h2&gt;Running WASM code in Go&lt;/h2&gt;
&lt;p&gt;Given a WASM module, how do we run it programmatically in Go? There are several
high-quality WASM &lt;em&gt;runtimes&lt;/em&gt; that work outside the browser environment, and many
of them have Go bindings; for example &lt;a class="reference external" href="https://github.com/bytecodealliance/wasmtime-go"&gt;wasmtime-go&lt;/a&gt;. The one I like most,
however, is &lt;a class="reference external" href="https://github.com/tetratelabs/wazero"&gt;wazero&lt;/a&gt;; it's a
zero-dependency, pure Go runtime that doesn't have any prerequisites except
running a &lt;tt class="docutils literal"&gt;go get&lt;/tt&gt;. Our FAAS server is using &lt;tt class="docutils literal"&gt;wazero&lt;/tt&gt; to load and run
WASM modules.&lt;/p&gt;
&lt;p&gt;Here's &lt;tt class="docutils literal"&gt;invokeWasmModule&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// invokeWasmModule invokes the given WASM module (given as a file path),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// setting its env vars according to env. Returns the module&amp;#39;s stdout.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;invokeWasmModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasmPath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wazero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRuntime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;wasi_snapshot_preview1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MustInstantiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Instantiate the wasm runtime, setting up exported functions from the host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// that the wasm module can use for logging purposes.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewHostModuleBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;NewFunctionBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;WithFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[%v]: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log_i32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;NewFunctionBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;WithFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Read the string from the module&amp;#39;s exported memory.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Memory&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[%v]: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[%v]: log_string: unable to read wasm memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log_string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Instantiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;wasmObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasmPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Set up stdout redirection and env vars for the module.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stdoutBuf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wazero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewModuleConfig&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;WithStdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;stdoutBuf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WithEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Instantiate the module. This invokes the _start function by default.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstantiateWithConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasmObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stdoutBuf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interesting things to note about this code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;wazero&lt;/tt&gt; supports WASI, which has to be instantiated explicitly to be usable
by the loaded modules.&lt;/li&gt;
&lt;li&gt;A lot of the code deals with exporting logging functions from the host (the
Go code of the FAAS server) to the WASM module.&lt;/li&gt;
&lt;li&gt;We set up the loaded module's stdout to be redirected to a buffer, and set up
its environment variables to match the &lt;tt class="docutils literal"&gt;env&lt;/tt&gt; map passed in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several way for host code to interact with WASM modules using only the
WASI API and ABI. Here, we opt for using environment variables for input and
stdout for output, but there are other options (see the &lt;em&gt;Other resources&lt;/em&gt;
section in the bottom for some pointers).&lt;/p&gt;
&lt;p&gt;This is it - the whole FAAS server, about 100 LOC of commented Go code. Now
let's move on to see some WASM modules this thing can load and run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-modules-in-go"&gt;
&lt;h2&gt;Writing modules in Go&lt;/h2&gt;
&lt;p&gt;We can compile Go code to WASM that uses WASI. Here's a basic Go program that
emits a greeting and a listing of its environment variables to stdout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;goenv environment:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Environ&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build using the standard Go toolchain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ GOOS=wasip1 GOARCH=wasm gotip build -o target/goenv.wasm examples/goenv/goenv.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(the &lt;tt class="docutils literal"&gt;wasip1&lt;/tt&gt; target name refers to &amp;quot;WASI Preview 1&amp;quot;)&lt;/p&gt;
&lt;p&gt;Sharp-eyed readers will recall that the &lt;tt class="docutils literal"&gt;target/&lt;/tt&gt; directory is precisely where
the FAAS server looks for &lt;tt class="docutils literal"&gt;*.wasm&lt;/tt&gt; files to load as modules. Now that we've
placed a module named &lt;tt class="docutils literal"&gt;goenv.wasm&lt;/tt&gt; there, we're ready to launch our server
with &lt;tt class="docutils literal"&gt;go run .&lt;/tt&gt; in the root directory. We can issue a HTTP request to its
&lt;tt class="docutils literal"&gt;goenv&lt;/tt&gt; module in a separate terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl &amp;quot;localhost:8080/goenv?foo=bar&amp;amp;id=1234&amp;quot;
goenv environment:
  http_method=GET
  http_host=localhost:8080
  http_query=foo=bar&amp;amp;id=1234
  remote_addr=127.0.0.1:59268
  http_path=/goenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And looking at the terminal where the FAAS server runs we'll see some logging
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2023/04/29 06:35:59 module goenv requested with query map[foo:[bar] id:[1234]]
2023/04/29 06:35:59 loading module target/goenv.wasm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another option to build this is using
the &lt;a class="reference external" href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; compiler. In our
FAAS project structure, the invocation from the root directory is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tinygo build -o target/goenv.wasm -target=wasi examples/goenv/goenv.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before Go 1.21, TinyGo has been the only way to target WASI, but this support
has been part of the standard toolchain for a few releases now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-modules-in-rust"&gt;
&lt;h2&gt;Writing modules in Rust&lt;/h2&gt;
&lt;p&gt;Rust is another language that has good support for WASM and WASI in the build
system. After adding the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wasm32-wasi&lt;/span&gt;&lt;/tt&gt; target with &lt;tt class="docutils literal"&gt;rustup&lt;/tt&gt;, it's as simple
as passing the target name to &lt;tt class="docutils literal"&gt;cargo&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo build --target wasm32-wasi --release
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is straightforward, similarly to the Go version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rustenv environment:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;::&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  {key}: {value}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-modules-in-webassembly-text-wat"&gt;
&lt;h2&gt;Writing modules in WebAssembly Text (WAT)&lt;/h2&gt;
&lt;p&gt;As we've seen, compiling Go and Rust code to WASM is fairly easy; looking for a
challenge, let's write a module in WAT! As &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/webassembly-text-code-samples/"&gt;I've written before&lt;/a&gt;, I enjoy
writing directly in WAT; it's educational, and produces remarkably compact
binaries.&lt;/p&gt;
&lt;p&gt;The &amp;quot;educational&amp;quot; aspect quickly becomes apparent when thinking about our task.
How exactly am I supposed to write to stdout or read environment variables using
WASM? This is where WASI comes in. WASI defines both an API and ABI, both of
which will be visible in our sample. The following shows some code snippets with
explanations; for the full code check out the &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/wasm-faas"&gt;sample repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, I want to show how output to stdout is done; we start by importing
the &lt;tt class="docutils literal"&gt;fd_write&lt;/tt&gt; WASI system call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wasi_snapshot_preview1&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fd_write&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;$fd_write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;param&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, it has four &lt;tt class="docutils literal"&gt;i32&lt;/tt&gt; parameters and returns an &lt;tt class="docutils literal"&gt;i32&lt;/tt&gt;; what do all
of these mean? Unfortunately, WASI documentation could use a lot of work; the
resources I found useful are &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#fd_write"&gt;Legacy preview 1 specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/WebAssembly/wasi-libc/blob/main/libc-bottom-half/headers/public/wasi/api.h#L1754"&gt;C header descriptions of these functions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this in hand, I was able to concoct a useful &lt;tt class="docutils literal"&gt;println&lt;/tt&gt; equivalent in
WAT that uses &lt;tt class="docutils literal"&gt;fd_write&lt;/tt&gt; under the hood:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; println prints a string to stdout using WASI.&lt;/span&gt;
&lt;span class="c1"&gt;;; It takes the string&amp;#39;s address and length as parameters.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;$println&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;$strptr&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;;; Print the string pointed to by $strptr first.&lt;/span&gt;
    &lt;span class="c1"&gt;;;   fd=1&lt;/span&gt;
    &lt;span class="c1"&gt;;;   data vector with the pointer and length&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.store&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$strptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.store&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$fd_write&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$fdwrite_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;drop&lt;/span&gt;

    &lt;span class="c1"&gt;;; Print out a newline.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.store&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mf"&gt;850&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.store&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$fd_write&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$datavec_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$fdwrite_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;drop&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uses some globals that you'll have to look up in the &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2023/wasm-faas/examples/watenv.wat"&gt;full code sample&lt;/a&gt;
if you're interested. Here's another helper function that prints out a
zero-terminated string to stdout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; show_env emits a single env var pair to stdout. envptr points to it,&lt;/span&gt;
&lt;span class="c1"&gt;;; and it&amp;#39;s 0-terminated.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;$show_env&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;$envptr&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; for i = 0; envptr[i] != 0; i++&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;$count_loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;$break_count_loop&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.eqz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.load8_u&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$envptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="nb"&gt;br_if&lt;/span&gt; &lt;span class="nv"&gt;$break_count_loop&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="nb"&gt;br&lt;/span&gt; &lt;span class="nv"&gt;$count_loop&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$println&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$envptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fun part about writing assembly is that there are no abstractions.
Everything is out in the open. You know how strings are typically represented
using either zero termination (like in C) or a &lt;tt class="docutils literal"&gt;(start, len)&lt;/tt&gt; pair?
In manual WAT code that uses WASI we have the pleasure of using both approaches
in the same program :-)&lt;/p&gt;
&lt;p&gt;Finally, our main function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;$main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$num_of_envs&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$next_env_ptr&lt;/span&gt; &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$log_string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mf"&gt;750&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Find out the number of env vars.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$environ_sizes_get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;drop&lt;/span&gt;

    &lt;span class="c1"&gt;;; Get the env vars themselves into memory.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$environ_get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_ptrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_buf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;drop&lt;/span&gt;

    &lt;span class="c1"&gt;;; Print out the preamble&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$println&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mf"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; for i = 0; i != *env_count; i++&lt;/span&gt;
    &lt;span class="c1"&gt;;;   show env var i&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt; &lt;span class="nv"&gt;$num_of_envs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;$envvar_loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;$break_envvar_loop&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.eq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$num_of_envs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;br_if&lt;/span&gt; &lt;span class="nv"&gt;$break_envvar_loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;;; next_env_ptr &amp;lt;- env_ptrs[i*4]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt;
            &lt;span class="nv"&gt;$next_env_ptr&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.add&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global.get&lt;/span&gt; &lt;span class="nv"&gt;$env_ptrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.mul&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

        &lt;span class="c1"&gt;;; print out this env var&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;$show_env&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$next_env_ptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.set&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local.get&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32.const&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;br&lt;/span&gt; &lt;span class="nv"&gt;$envvar_loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now compile this WAT code into a FAAS module and re-run the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wat2wasm examples/watenv.wat -o target/watenv.wasm
$ go run .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl &amp;quot;localhost:8080/watenv?foo=bar&amp;amp;id=1234&amp;quot;
watenv environment:
http_host=localhost:8080
http_query=foo=bar&amp;amp;id=1234
remote_addr=127.0.0.1:43868
http_path=/watenv
http_method=GET
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="wasi-api-and-abi"&gt;
&lt;h3&gt;WASI: API and ABI&lt;/h3&gt;
&lt;p&gt;I've mentioned the &lt;em&gt;WASI API and ABI&lt;/em&gt; earlier; now it's a good time to explain
what that means. An API is a set of functions that programs using WASI have
access to; one can think of it as a standard library of sorts. Go programmers
have access to the &lt;tt class="docutils literal"&gt;fmt&lt;/tt&gt; package and the &lt;tt class="docutils literal"&gt;Println&lt;/tt&gt; function within it.
Programs targeting WASI have access to the &lt;tt class="docutils literal"&gt;fd_write&lt;/tt&gt; system call in the
&lt;tt class="docutils literal"&gt;wasi_snapshow_preview1&lt;/tt&gt; module, and so on. The API of &lt;tt class="docutils literal"&gt;fd_write&lt;/tt&gt; also
defines how this function takes parameters and what it returns. Our sample uses
three WASI functions: &lt;tt class="docutils literal"&gt;fd_write&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;environ_sizes_get&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;environ_get&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;An ABI is a little bit less familiar to most programmers; it's the run-time
contract between a program and its environment. The WASI ABI is currently
unstable and is &lt;a class="reference external" href="https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md"&gt;described here&lt;/a&gt;. In
our program, the ABI manifests in two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The main entry point we export is the &lt;tt class="docutils literal"&gt;_start&lt;/tt&gt; function. This is
automatically called by a WASI-supporting host after setup.&lt;/li&gt;
&lt;li&gt;Our WASM code exports its linear memory to the host with
&lt;tt class="docutils literal"&gt;(memory (export &amp;quot;memory&amp;quot;) 1)&lt;/tt&gt;. Since WASI APIs require passing pointers
to memory, both the host and the WASM module need a shared understanding
of how to access this memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Naturally, both the Go and Rust implementations of FAAS modules comply to the
WASI API and ABI, but this is hidden by the compiler from programmers. In the
Go program, for example, all we need to do is write a &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function as usual
and therein emit to stdout using &lt;tt class="docutils literal"&gt;Println&lt;/tt&gt;. The Go compiler will properly
export &lt;tt class="docutils literal"&gt;_start&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;memory&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wasm-objdump -x target/goenv.wasm

... snip

Export[2]:
 - func[1028] &amp;lt;_rt0_wasm_wasip1&amp;gt; -&amp;gt; &amp;quot;_start&amp;quot;
 - memory[0] -&amp;gt; &amp;quot;memory&amp;quot;

... snip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And will properly hook things up to call our code from &lt;tt class="docutils literal"&gt;_start&lt;/tt&gt;, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wasi-and-plugins"&gt;
&lt;h2&gt;WASI and plugins&lt;/h2&gt;
&lt;p&gt;The FAAS server presented in this post is clearly an example of developing
&lt;em&gt;plugins&lt;/em&gt; using WASM and WASI. This is an emerging and exciting area in
programming and lots of progress is being made on multiple fronts. Right now,
WASI modules are limited to interacting with the environment via means like
environment variables and stdin/stdout; while this is fine for interacting
with the outside world, for host-to-module communication it's not amazing, in
my experience. Therefore the WASM standards committee is working of further
improvements to WASI that may include sockets and other means of passing data
between hosts and modules.&lt;/p&gt;
&lt;p&gt;In the meantime, projects are making do with what they have. For example, the
&lt;a class="reference external" href="https://sqlc.dev/"&gt;sqlc Go package&lt;/a&gt; supports WASM plugins. The communication
with plugins happens as follows: the host encodes a command into a protobuf
and emits it to the plugin's stdin; it then reads the plugin's stdout for a
protobuf-encoded response.&lt;/p&gt;
&lt;p&gt;Other projects are taking more maverick approaches; for example, &lt;a class="reference external" href="https://www.envoyproxy.io/"&gt;the Envoy
proxy&lt;/a&gt;
&lt;a class="reference external" href="https://eli.thegreenplace.net/2023/plugins-case-study-envoy-wasm-extensions/"&gt;supports WASM plugins&lt;/a&gt;
by defining a custom API and ABI between the host and WASM modules. I'll
probably write more about this in a later post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-resources"&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;p&gt;Here are some additional resources on the same topic as this post:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.scottlogic.com/2022/04/16/wasm-faas.html"&gt;Building a WebAssembly-powered serverless platform&lt;/a&gt; - the
post that inspired this one. Other WASM-related articles from that blog are
also recommended.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/deislabs/wagi"&gt;wagi&lt;/a&gt; - a more featured approch with
the same idea, implemented in Rust.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wasmer.io/posts/announcing-wcgi"&gt;WCGI&lt;/a&gt; - an even more
CGI-conformant approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The main Go compiler supported WASM for a while, but only as a target
for browsers &amp;amp; JS (I wrote &lt;a class="reference external" href="https://eli.thegreenplace.net/2022/sudoku-go-and-webassembly/"&gt;a bit about it recently&lt;/a&gt;).
The news in 1.21 is the &lt;tt class="docutils literal"&gt;GOOS=wasip1&lt;/tt&gt; support, which hooks up Go's
internal syscalls to WASI APIs, sets up the ABI etc.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;These resources tend to disappear and move around without notice; if you
notice a dead link, please drop me a note and I'll look for a more
up-to-date source.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="WebAssembly"></category><category term="Rust"></category><category term="Plugins"></category></entry><entry><title>RPC-based plugins in Go</title><link href="https://eli.thegreenplace.net/2023/rpc-based-plugins-in-go/" rel="alternate"></link><published>2023-03-28T20:05:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2023-03-28:/2023/rpc-based-plugins-in-go/</id><summary type="html">&lt;p&gt;This post is the next installment in my &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;plugin series&lt;/a&gt;.
&lt;a class="reference external" href="https://eli.thegreenplace.net/2021/plugins-in-go/"&gt;The last post&lt;/a&gt;
discussed the two main approaches to developing plugins in Go: compile-time
plugins and run-time plugins. For run-time plugins, the post described how to
use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-buildmode=plugin&lt;/span&gt;&lt;/tt&gt; and shared libraries to load plugins at runtime, but
also hinted â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is the next installment in my &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;plugin series&lt;/a&gt;.
&lt;a class="reference external" href="https://eli.thegreenplace.net/2021/plugins-in-go/"&gt;The last post&lt;/a&gt;
discussed the two main approaches to developing plugins in Go: compile-time
plugins and run-time plugins. For run-time plugins, the post described how to
use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-buildmode=plugin&lt;/span&gt;&lt;/tt&gt; and shared libraries to load plugins at runtime, but
also hinted at an alternative approach that uses separate processes and RPC.&lt;/p&gt;
&lt;p&gt;Now it's time to discuss the RPC approach in more detail, using the
&lt;a class="reference external" href="https://github.com/hashicorp/go-plugin"&gt;hashicorp/go-plugin&lt;/a&gt; package. Here's
a sketch of how such plugins work:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Each plugin is a separate Go binary, built using some code shared with the
main application.&lt;/li&gt;
&lt;li&gt;The main application loads plugins by running their binaries as sub-processes.&lt;/li&gt;
&lt;li&gt;The main application talks to plugins via RPC to access their functionality.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll start by explaining how the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; package works and how it helps
us write plugins. Then I'll present a re-implementation of the &lt;em&gt;htmlize&lt;/em&gt; program
we've been using throughout the plugin series, this time using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="the-go-plugin-package"&gt;
&lt;h2&gt;The go-plugin package&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/hashicorp/go-plugin"&gt;go-plugin&lt;/a&gt; was developed by
HashiCorp - a powerhouse of Go-based tooling, and has been used in production
by many of their tools (like Terraform and Vault) for years. This is one if its
greatest strengths - it's battle-tested.&lt;/p&gt;
&lt;p&gt;The basic idea behind &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; is a run-time plugin system wherein each
plugin is a separate binary and runs in its own OS process.&lt;/p&gt;
&lt;img alt="A plugin in its on OS process talking RPC with other plugins in their separate OS processes" class="align-center" src="https://eli.thegreenplace.net/images/2023/plugin-rpc-binaries.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; lets us pick which RPC mechanism to use; it supports
&lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt; and gRPC out of the box. Therefore, its API is a bit odd at first
sight. Specifically, we are expected to define our own RPC methods both for
the server (plugin) and the client (main application), and register them with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; by implementing its &lt;a class="reference external" href="https://pkg.go.dev/github.com/hashicorp/go-plugin#Plugin"&gt;Plugin interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This leaves one thinking - &amp;quot;wait, so what does &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; give me, anyway? If
I have to implement my own RPC, do I really need this helper package?&amp;quot; - which
is a valid question. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; provides several important capabilities,
however:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Handles the actual network connection between a client and multiple servers:
supporting Unix domain sockets on Linux &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/unix-domain-sockets-in-go/"&gt;for performance&lt;/a&gt;, TCP
elsewhere.&lt;/li&gt;
&lt;li&gt;When the client launches a plugin server, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; handles &lt;em&gt;discovery&lt;/em&gt;
- figuring out which port/file the server is listening on, and establishing
the connection. This also includes verifying that the launched binary is
the right plugin, meant for this program and not something else.&lt;/li&gt;
&lt;li&gt;Supports protocol versioning, which ensures that the main binary doesn't try
to talk to plugins that are &amp;quot;too old&amp;quot;.&lt;/li&gt;
&lt;li&gt;Supports liveness pings to plugins.&lt;/li&gt;
&lt;li&gt;Can set up mTLS between the client and servers (useful when the plugin runs
on a different machine).&lt;/li&gt;
&lt;li&gt;Handles redirection of plugin stdin/stdout streams and logs back to the main
process.&lt;/li&gt;
&lt;li&gt;Allows having multiple logical plugins reside in the same binary/process,
each with its own RPC interface. All plugins share a single connection to the
main process via connection multiplexing that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; implements. This
also allows plugins to call back into the main application - more on this
later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="htmlize-plugins-with-go-plugin"&gt;
&lt;h2&gt;htmlize plugins with go-plugin&lt;/h2&gt;
&lt;p&gt;Let's rebuild our &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; tool that we've been using for this demonstration
since the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;original plugins post&lt;/a&gt;
(including the &lt;a class="reference external" href="https://eli.thegreenplace.net/2021/plugins-in-go/"&gt;Go version&lt;/a&gt;), this time using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt;. The full code for this version is &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/go-plugin-htmlize-rpc"&gt;on GitHub&lt;/a&gt;.
We will examine it using the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;fundamental concepts of plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discovery and registration:&lt;/strong&gt; since plugins are just binaries that can be
found anywhere, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; doesn't prescribe what approach to take here. It
only provides a &lt;tt class="docutils literal"&gt;Discover&lt;/tt&gt; function which is a basic wrapper around a
filesystem glob pattern. In our code, the &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2023/go-plugin-htmlize-rpc/plugin/manager.go"&gt;Manager type&lt;/a&gt; takes a
path where it will look for plugin binaries, and treats each file in that
directory as a potential plugin.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; does provide tools to ensure that a loaded binary is, in fact, a
plugin for the right application. When creating a new &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; client, we
have to pass in a &lt;a class="reference external" href="https://pkg.go.dev/github.com/hashicorp/go-plugin#HandshakeConfig"&gt;HandshakeConfig&lt;/a&gt;, which
has to match between the application and the plugin. This helps ensure that we
don't attempt to load a plugin meant for another application, or for a different
version of this application.&lt;/p&gt;
&lt;p&gt;As described earlier, at this point &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; takes over; it launches the
plugin in a subprocess, connects to its stdout to discover which address the
plugin server is listening on (could be a Unix domain socket or a TCP socket,
based on OS), and then sets up the RPC. The main application (client) is now
ready to invoke RPCs in the plugin (server), based on the agreed-upon interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application hooks:&lt;/strong&gt; the central communication point between a plugin and an
application with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; is the plugin's &lt;em&gt;exposed interface&lt;/em&gt;. In our
case, the interface is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Htmlizer is the interface plugins have to implement. To avoid calling the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// plugin for roles it doesn&amp;#39;t support, it has to tell the plugin managers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// which roles it wants to be invoked on by implementing the Hooks() method.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Htmlizer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Hooks returns a list of the hooks this plugin wants to register.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Hooks can have one of the following forms:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//  * &amp;quot;contents&amp;quot;: the plugin&amp;#39;s ProcessContents method will be called on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//                the post&amp;#39;s complete contents.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// * &amp;quot;role:NN&amp;quot;: the plugin&amp;#39;s ProcessRole method will be called with role=NN&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//              and the role&amp;#39;s value when a :NN: role is encountered in the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;//              input.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ProcessRole is called on roles the plugin requested in the list returned&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// by Hooks(). It takes the role name, role value in the input and the post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// and should return the transformed role value.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ProcessRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ProcessContents is called on the entire post contents, if requested in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Hooks(). It takes the contents and the post and should return the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// transformed contents.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ProcessContents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This interface is presented to the application via a RPC mechanism, so code
in the application simply invokes these methods on a value implementing the
interface; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; translates this to RPC calls behind the scenes &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recommend you to carefully read the comments on the &lt;tt class="docutils literal"&gt;Htmlizer&lt;/tt&gt; interface;
they describe an interesting nuance w.r.t. application hooks. In our &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt;
application, we want plugins to register for specific text &amp;quot;roles&amp;quot;. If a plugin
didn't register for a role, we don't want to invoke it when the role is
encountered - it's wasteful to call N RPCs for N plugins for each role, when in
reality at most one plugin likely cares about any given role.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; does not provide built-in support to handle this conditional
registration. A plugin exposes an interface via RPC, and that's it. But it turns
out to be fairly easy to implement in a custom way, as our &lt;tt class="docutils literal"&gt;Hooks&lt;/tt&gt; method
demonstrates. Here is how our plugin &lt;tt class="docutils literal"&gt;Manager&lt;/tt&gt; type handles this; first the
&lt;tt class="docutils literal"&gt;Manager&lt;/tt&gt; type itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Manager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;roleHooks&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;Htmlizer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;contentsHooks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Htmlizer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pluginClients&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;goplugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the relevant part from its &lt;tt class="docutils literal"&gt;LoadPlugins&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Query the plugin for its capabilities -- the hooks it supports.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Based on this information, register the plugin with the appropriate&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// role or contents hooks.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;capabilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;impl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;capabilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contents&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentsHooks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentsHooks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;impl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roleHooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;impl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It queries each plugins for its supported hooks, and then registers the right
hooks. As a result, when we encounter a role like &lt;tt class="docutils literal"&gt;:tt:&lt;/tt&gt;, it will only invoke
the plugin that asked to handle this role.&lt;/p&gt;
&lt;p&gt;In this code &lt;tt class="docutils literal"&gt;impl&lt;/tt&gt; refers to a value of the type &lt;tt class="docutils literal"&gt;PluginClientRPC&lt;/tt&gt;, which
implements the &lt;tt class="docutils literal"&gt;Htmlize&lt;/tt&gt; interface by issuing RPC calls to the plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// PluginClientRPC is used by clients (main application) to translate the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Htmlize interface of plugins to RPC calls.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PluginClientRPC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;rpc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;PluginClientRPC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HooksReply&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Plugin.Hooks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HooksArgs&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;PluginClientRPC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ProcessContents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ContentsReply&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Plugin.ProcessContents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ContentsArgs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;PluginClientRPC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ProcessRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RoleReply&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Plugin.ProcessRole&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;RoleArgs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Per convention, each RPC call has its own type for arguments and another for
the response (e.g. &lt;tt class="docutils literal"&gt;RoleArgs&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;RoleReply&lt;/tt&gt;). These are basic data
containers I'm leaving out of this post but you can see in the code.
A similar RPC wrapper is implemented on the server (plugin) side, doing the
translation the other way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exposing application capabilities back to plugins:&lt;/strong&gt; this is actually quite
tricky to accomplish in RPC-based systems, at least in the general case. Since
in this model plugins run in a separate process, we can't just pass a reference
to a big data structure into the plugin as we did before.&lt;/p&gt;
&lt;p&gt;For small and simple data structures, serializing them through the RPC is not
an issue. This is what our example does for the &lt;tt class="docutils literal"&gt;content.Post&lt;/tt&gt; type - as you
can see from the &lt;tt class="docutils literal"&gt;Htmlizer&lt;/tt&gt; interface code snippet above. But what about
larger types? What if we want to expose the entire DB to the plugin? Or have the
plugin invoke functionality in the main application.&lt;/p&gt;
&lt;p&gt;This is one of the capabilities &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; provides, via its &lt;em&gt;bidirectional
communication&lt;/em&gt; feature. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; can multiplex several RPC channels onto
the same connection between the plugin and the application (using the &lt;a class="reference external" href="https://github.com/hashicorp/yamux"&gt;yamux
package&lt;/a&gt;), and through this the client
can open its own RPC server available to the plugin to invoke.&lt;/p&gt;
&lt;p&gt;I left this out of our example because I didn't want to needlessly complicate
it (we don't really need this functionality for &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt;), but I created a
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/go-plugin-bidir-netrpc"&gt;separate sample&lt;/a&gt;
that shows how to do this with &lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt; - it's on GitHub if you're interested
&lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-sample-plugin-for-htmlize"&gt;
&lt;h2&gt;A sample plugin for &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Here's the entire code for a sample plugin - one that implements rendering the
&lt;tt class="docutils literal"&gt;:tt:&lt;/tt&gt; role into the &lt;tt class="docutils literal"&gt;&amp;lt;tt&amp;gt;&lt;/tt&gt; HTML element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;example.com/content&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;example.com/plugin&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;goplugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/hashicorp/go-plugin&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TtHtmlizer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TtHtmlizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;role:tt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TtHtmlizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ProcessContents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TtHtmlizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ProcessRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;goplugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;goplugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServeConfig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;HandshakeConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handshake&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;goplugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;htmlize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HtmlizePlugin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Impl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TtHtmlizer&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; involves a bit of work for setting up the RPC scaffolding,
but once that's all done, writing new plugins is quick and easy: just implement
an interface and invoke a plugin server registration function in &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-shared-libraries-vs-rpc-for-plugins"&gt;
&lt;h2&gt;Comparing shared libraries vs RPC for plugins&lt;/h2&gt;
&lt;p&gt;By now we've seen how to create run-time plugins in Go using two different
mechanisms: shared libraries (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--buildmode=plugin&lt;/span&gt;&lt;/tt&gt;) and RPC (via
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt;). Which one should you actually use?&lt;/p&gt;
&lt;p&gt;As the &lt;a class="reference external" href="https://eli.thegreenplace.net/2021/plugins-in-go/"&gt;previous post&lt;/a&gt;
discussed, shared library plugins can be awkward to work with, because they
require strict source code compatibility with the main application. Another
problem is portability: they don't currently work on Windows, for example, and
it's not clear if they ever will.&lt;/p&gt;
&lt;p&gt;On the other hand, shared library plugins have excellent performance: plugins
run in-process with the main application. Calling a plugin is a simple Go
function call and we can pass references to data structures across the boundary.
Compare that to RPC, where each call is a network interaction; even if this
&amp;quot;network&amp;quot; is very fast (Unix domain sockets or localhost TCP), it still implies
serializing the data into a linear buffer, then deserializing it at the other
end; this is orders of magnitude slower per invocation.&lt;/p&gt;
&lt;p&gt;RPC-based plugins have some clear benefits of their own, however. First and
foremost - isolation; a plugin runs in a process of its own. If it crashes,
it doesn't bring down the rest of the application with it.
Moreover, if the plugin is malicious there's limited damage it can do to the
application itself. Plugins can even be invoked with different system
permissions from the main application. With some tinkering it should be possible
to set up a plugin that runs inside a container.&lt;/p&gt;
&lt;p&gt;An additional benefit is that plugins can be distributed; since they can talk
RPC over TCP. It's easy to set up a plugin that runs on a different machine
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; supports this with its &lt;tt class="docutils literal"&gt;ReattachConfig&lt;/tt&gt; type).&lt;/p&gt;
&lt;p&gt;Finally, since the interface is RPC, the plugins don't even necessarily have to
be written in Go! If we use the gRPC interface, we can theoretically use any
language to write a plugin for a Go application; in this scenario, all the data
exchanged between the main application and plugins goes through protocol buffers
anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="source-code"&gt;
&lt;h2&gt;Source code&lt;/h2&gt;
&lt;p&gt;The full source code for this sample is here: &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/go-plugin-htmlize-rpc"&gt;go-plugin-htmlize-rpc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Separate sample that shows how to call back from plugins into the host with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt;: &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/go-plugin-bidir-netrpc"&gt;go-plugin-bidir-netrpc&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To be precise, it's RPC scaffolding implemented by us + &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt;
that do this in tandem. As described earlier, in order to support
multiple RPC flavors, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; leaves the RPC layer scaffolding
for users to define.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; repository has an example of doing this for gRPC
but not for &lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt;, as far as I could tell.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Plugins"></category><category term="Network Programming"></category></entry><entry><title>Plugins in Go</title><link href="https://eli.thegreenplace.net/2021/plugins-in-go/" rel="alternate"></link><published>2021-08-28T07:19:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2021-08-28:/2021/plugins-in-go/</id><summary type="html">&lt;p&gt;Several years ago I started writing a &lt;a class="reference external" href="https://eli.thegreenplace.net/tag/plugins"&gt;series of posts&lt;/a&gt; on &lt;em&gt;plugins&lt;/em&gt;: how they are
designed and implemented in various systems and programming languages. In this,
I'll extend the series by providing some examples of plugins in Go.&lt;/p&gt;
&lt;p&gt;As a reminder, &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;the original post&lt;/a&gt;
in this series identifies four fundamental â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Several years ago I started writing a &lt;a class="reference external" href="https://eli.thegreenplace.net/tag/plugins"&gt;series of posts&lt;/a&gt; on &lt;em&gt;plugins&lt;/em&gt;: how they are
designed and implemented in various systems and programming languages. In this,
I'll extend the series by providing some examples of plugins in Go.&lt;/p&gt;
&lt;p&gt;As a reminder, &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;the original post&lt;/a&gt;
in this series identifies four fundamental plugin concepts, and claims that
nearly all plugin systems can be characterized and understood by mapping
their design to these concepts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Discovery&lt;/li&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;li&gt;Application hooks to which plugins attach (aka. &amp;quot;mount points&amp;quot;)&lt;/li&gt;
&lt;li&gt;Exposing application capabilities back to plugins (aka. extension API)&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Gopher holding an Ethernet cable plugged into the wall" class="align-center" src="https://eli.thegreenplace.net/images/2021/gopherplug.png" style="width: 300px;" /&gt;
&lt;div class="section" id="two-kinds-of-plugins"&gt;
&lt;h2&gt;Two kinds of plugins&lt;/h2&gt;
&lt;p&gt;As in other statically compiled programming languages, in Go it's common to talk
about two general kinds of plugins: compile-time plugins and run-time plugins.
We'll cover both kinds here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compile-time-plugins"&gt;
&lt;h2&gt;Compile-time plugins&lt;/h2&gt;
&lt;p&gt;Compile-time plugins consist of code packages that get compiled into the
application's main binary. Once the binary is built, its functionality is fixed.&lt;/p&gt;
&lt;p&gt;The best known example of a compile-time plugin system in Go is drivers for the
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package. I've written &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/design-patterns-in-gos-databasesql-package/"&gt;a whole post about this topic&lt;/a&gt;
- please read it!&lt;/p&gt;
&lt;p&gt;To briefly recap: database drivers are packages that the main application
imports using a blank &lt;tt class="docutils literal"&gt;import _ &amp;quot;name&amp;quot;&lt;/tt&gt;. These packages then use their
&lt;tt class="docutils literal"&gt;init&lt;/tt&gt; functions to register with the &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package using
&lt;tt class="docutils literal"&gt;sql.Register&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;W.r.t. the fundamental plugin concepts, here is how compile-time plugins (and
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; as a concrete example) fare:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Discovery: very explicit, with an import of a plugin package. Plugins can
then perform registration automatically in their &lt;tt class="docutils literal"&gt;init&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;Registration: since the plugin is compiled into the main application, it's
straightforward for it to invoke a registration function
(e.g. &lt;tt class="docutils literal"&gt;sql.Register&lt;/tt&gt;) directly from the plugin.&lt;/li&gt;
&lt;li&gt;Application hooks: Typically, a plugin will implement an interface the
application provides and the registration process will hook up the interface
implementation. With &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;, a plugin will implement the
&lt;tt class="docutils literal"&gt;driver.Driver&lt;/tt&gt; interface and a value implementing this interface will
be registered using &lt;tt class="docutils literal"&gt;sql.Register&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Exposing application capabilities back to plugins: with compile-time plugins
this is simple; since the plugin is compiled into the binary, it can
just &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; utility packages from the main application and use these in
its code as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="run-time-plugins"&gt;
&lt;h2&gt;Run-time plugins&lt;/h2&gt;
&lt;p&gt;Run-time plugins consist of code that does not get compiled into the original
binary of the main application; instead, it hooks up to this application at
run-time. In compiled languages, a common tool to achieve this goal is &lt;em&gt;shared
libraries&lt;/em&gt;, and Go supports this approach as well. The rest of this section will
provide an example of developing a plugin system in Go using shared libraries;
alternative approaches will be examined a bit later.&lt;/p&gt;
&lt;p&gt;Go comes with a &lt;tt class="docutils literal"&gt;plugin&lt;/tt&gt; package built into the standard library. This package
lets us write Go programs that get compiled into shared libraries instead of
into executable binaries; further, it provides simple functions for loading
shared libraries and getting symbols from them.&lt;/p&gt;
&lt;p&gt;For this post, I've developed a complete example of a run-time plugin system; it
replicates the original &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; example from the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures"&gt;post on plugin
infrastructures&lt;/a&gt;,
and its design is similar to the one in the followup post on &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/24/plugins-in-c"&gt;Plugins in C&lt;/a&gt;. The example consists
of a simplistic program to convert some markup language (like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt; or Markdown) to HTML, with
support for plugins that let us adjust the way certain markup elements are
processed. The full sample code for this post &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-htmlize-plugin"&gt;is available here&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Directory contents of the plugin sample" class="align-center" src="https://eli.thegreenplace.net/images/2021/plugin-dir-contents.png" /&gt;
&lt;p&gt;Let's examine this sample using the fundamental concepts of plugins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discovery and Registration&lt;/strong&gt;: accomplished via file system lookup. The
main application has a &lt;tt class="docutils literal"&gt;plugin&lt;/tt&gt; package with the &lt;tt class="docutils literal"&gt;LoadPlugins&lt;/tt&gt; function.
This function scans a given directory for files ending with &lt;tt class="docutils literal"&gt;.so&lt;/tt&gt; and treats
all such files as plugins. It expects to find a global function named
&lt;tt class="docutils literal"&gt;InitPlugin&lt;/tt&gt; in each shared library, and invokes it providing it a
&lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; (more on which later).&lt;/p&gt;
&lt;p&gt;How did the plugins become &lt;tt class="docutils literal"&gt;.so&lt;/tt&gt; files in the first place? By building them
with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-buildmode=plugin&lt;/span&gt;&lt;/tt&gt; flag. Look at the &lt;tt class="docutils literal"&gt;buildplugins.sh&lt;/tt&gt; script and
the README file &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2021/go-htmlize-plugin/"&gt;in the code sample&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application hooks&lt;/strong&gt;: now is a good time to describe the &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt;
type. This is the main type used for communicating between plugins and the main
application. The flow is as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The application creates a new &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;LoadPlugins&lt;/tt&gt;, and passes
it to all the plugins it finds.&lt;/li&gt;
&lt;li&gt;Each plugin uses the &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; to register its own handlers for
various hooks.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LoadPlugins&lt;/tt&gt; returns the &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; to the main application after
all plugins have registered with it.&lt;/li&gt;
&lt;li&gt;When the application runs, it uses &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; to invoke
plugin-registered hooks as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example, &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; has this method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;PluginManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RegisterRoleHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rolename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RoleHook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;RoleHook&lt;/tt&gt; is a function type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// RoleHook takes the role contents, DB and Post and returns the text this role&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// should be replaced with.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RoleHook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugins can invoke &lt;tt class="docutils literal"&gt;RegisterRoleHook&lt;/tt&gt; to register a handler for a specific
text role. Note that this design doesn't actually use Go interfaces, but
alternative designs could do that; it all depends on the specifics of the
application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exposing application capabilities back to plugins&lt;/strong&gt;: as you can see in the
&lt;tt class="docutils literal"&gt;RoleHook&lt;/tt&gt; type above, the application passes data objects to the plugin for
its use. &lt;tt class="docutils literal"&gt;content.DB&lt;/tt&gt; provides access to the application database, and
&lt;tt class="docutils literal"&gt;content.Post&lt;/tt&gt; provides the specific post the plugin is currently formatting.
The plugin can use these objects to obtain data or behavior from the
application, as needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-with-shared-library-plugins-in-go"&gt;
&lt;h2&gt;Issues with shared library plugins in Go&lt;/h2&gt;
&lt;p&gt;Run-time plugins using shared libraries and the &lt;tt class="docutils literal"&gt;plugin&lt;/tt&gt; package work well for
Go, as the previous section demonstrates. However, this approach also has some
serious downsides. The most important downside is that Go is very picky about
keeping the main application and the shared libraries it loads compatible.&lt;/p&gt;
&lt;p&gt;As an experiment, make a small modification in one of the packages used by both
plugins and the main application, rebuild the main application and run it. Most
likely you'll get this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;plugin was built with a different version of package XXX&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason for this is that Go wants all the versions of all packages in the
main application and plugins to match exactly. It's clear what motivates this:
safety.&lt;/p&gt;
&lt;p&gt;Consider C and C++ as a counter-example. In these languages, an application can
load a shared library with &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; and subsequently use &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; to obtain
symbols from it. &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; is extremely weakly typed; it takes a symbol name
and returns a &lt;tt class="docutils literal"&gt;void*&lt;/tt&gt;. It's up to the user to cast this to a concrete function
type. If the function type changes because of a version update, the result can
very likely be some sort of segmentation fault or even memory corruption.&lt;/p&gt;
&lt;p&gt;Since Go relies on shared libraries from plugins, it has the same inherent
safety issues. It tries to protect programmers from shooting themselves in the
foot by ensuring that the application has been built with the same versions of
packages as all its plugins. This helps avoid mismatch. In addition, the version
of the Go compiler used to build the application and plugins must match exactly.&lt;/p&gt;
&lt;p&gt;However, this protection comes with downsides - making developing plugins
somewhat cumbersome. Having to rebuild all plugins whenever any common packages
change - even in ways that don't affect the plugin interface - is a heavy
burden. Especially considering that by their very nature plugins are typically
developed separately from the main application; they may live in separate
repositories, have separate release cadences etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-approaches-to-run-time-plugins"&gt;
&lt;h2&gt;Alternative approaches to run-time plugins&lt;/h2&gt;
&lt;p&gt;Given that the &lt;tt class="docutils literal"&gt;plugin&lt;/tt&gt; package was only added to Go in &lt;a class="reference external" href="https://golang.org/doc/go1.8"&gt;version 1.8&lt;/a&gt; and the limitation described previously, it's
not surprising that the Go ecosystem saw the emergence of alternative plugin
approaches.&lt;/p&gt;
&lt;p&gt;One of the most interesting directions, IMHO, involves plugins via RPC. I've
always been a fan of decoupling an application into separate processes
communicating via RPC or just TCP on localhost (I guess they
call this &lt;em&gt;microservices&lt;/em&gt; these days), since it has several important upsides:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolation: crash in a plugin does not bring the whole application down.&lt;/li&gt;
&lt;li&gt;Interoperability between languages: if RPC is the interface, do you care what
language the plugin is written in?&lt;/li&gt;
&lt;li&gt;Distribution: if plugins interface via the network, we can easily distribute
them to run on different machines for gains in performance, reliability, and
so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, Go makes this particularly easy by having a fairly capable RPC package
right in the standard library: &lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;One of the most widely used RPC-based plugin systems is &lt;a class="reference external" href="https://github.com/hashicorp/go-plugin"&gt;hashicorp/go-plugin&lt;/a&gt;. Hashicorp is well known for creating
great Go software, and apparently they use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; for many of their
systems, so it's battle-tested (though its documentation could be better!)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; runs on top of &lt;tt class="docutils literal"&gt;net/rpc&lt;/tt&gt; but also supports gRPC. Advanced RPC
protocols like gRPC are well suitable for plugins because they include
versioning out-of-the-box, tackling the difficult interoperability problem
between different versions of plugins vs. the main application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update (2023-03-28)&lt;/strong&gt;: &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/rpc-based-plugins-in-go/"&gt;here's a post&lt;/a&gt;
about using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-plugin&lt;/span&gt;&lt;/tt&gt; to implement the same functionality.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Plugins"></category></entry><entry><title>Design patterns in Go's database/sql package</title><link href="https://eli.thegreenplace.net/2019/design-patterns-in-gos-databasesql-package/" rel="alternate"></link><published>2019-03-27T06:25:00-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2019-03-27:/2019/design-patterns-in-gos-databasesql-package/</id><summary type="html">&lt;p&gt;Using SQL databases from Go is easy, in three steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Step 1: import the main SQL package&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2: import a driver package to use a specific SQL database&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3: open a database using a registered driver name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Using SQL databases from Go is easy, in three steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Step 1: import the main SQL package&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2: import a driver package to use a specific SQL database&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3: open a database using a registered driver name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this point on, the &lt;tt class="docutils literal"&gt;db&lt;/tt&gt; object can be used to query and modify the
database, with the same code suitable for all the supported SQL databases. If we
want to change our database from SQLite to PostgreSQL, it's very likely that we
only need to import a different driver and provide a different name in the call
to &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; &lt;a class="footnote-reference" href="#sql1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I want to briefly examine some of the design patterns and
architecture behind &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; that makes this all possible.&lt;/p&gt;
&lt;div class="section" id="the-main-design-pattern"&gt;
&lt;h2&gt;The main design pattern&lt;/h2&gt;
&lt;p&gt;The architecture of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; is governed by one overarching design
pattern. I was trying to figure out which of the classical design patterns it
resembles most, and the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy Pattern&lt;/a&gt; seems the closest, though
it's not quite that. Let me know if you can think of a closer correspondence
&lt;a class="footnote-reference" href="#sql2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It goes like this: we have a common interface we want to present to users,
with an implementation that's specific to every DB backend. Obviously, this
sounds like a classic interface + implementation, which Go is particularly good
at with its robust support for interfaces.&lt;/p&gt;
&lt;p&gt;So the first idea would be: create some &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface which the user
interacts with, and each backend implements this interface. Sounds simple,
right?&lt;/p&gt;
&lt;p&gt;Sure, but there are some issues with this approach. Remember that Go recommends
interfaces to be small, with just a handful of methods to implement. Here we'd
need a much larger &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface, and this leads to problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adding user-facing capabilities is difficult because they may require
adding methods to the interface. This breaks all the interface
implementations and requires multiple standalone projects to update their
code.&lt;/li&gt;
&lt;li&gt;Encapsulating functionality that is common to all database backends is
difficult, because there is no natural place to add it if the user interacts
directly with the &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface. It has to be implemented separately for
each backend, which is wasteful and logistically complicated.&lt;/li&gt;
&lt;li&gt;If backends want to add optional capabilities, this is challenging with
a single interface without resorting to type-casts for specific backends.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, a better idea seems to be: split up the user-facing type and
functionality from the common backend interface. Graphically, it looks like
this:&lt;/p&gt;
&lt;img alt="SQL DB and driver interface diagram" class="align-center" src="https://eli.thegreenplace.net/images/2019/database_sql_diagram.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; is a user-facing type. It's not an interface, but a &lt;em&gt;concrete&lt;/em&gt; type (a
struct) implemented in &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; itself. It is backend-independent and
encapsulates a lot of functionality that is common to all backends, like
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Connection_pool"&gt;connection pooling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do backend-specific work (such as issue SQL queries to the actual database),
&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; uses an interface called &lt;tt class="docutils literal"&gt;database/sql/driver.Driver&lt;/tt&gt; (and several
other interfaces that define connections, transactions, etc). This interface
is lower-level, and it's implemented by each database backend. In the diagram
above we can see implementations from the &lt;tt class="docutils literal"&gt;pq&lt;/tt&gt; package (for PostreSQL)
and from the &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt; package.&lt;/p&gt;
&lt;p&gt;This approach helps &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; elegantly address the problems mentioned
earlier:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adding user-facing capabilities doesn't necessarily require an interface
change now, as long as the capability can be implemented in the
backend-independent layer (&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; and its sister types).&lt;/li&gt;
&lt;li&gt;Functionality that's common to all database backends now has a natural place
to be in. I've mentioned connection pooling, but there is a lot of other
stuff the backend-independent types in &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; add on top of the
backend-specific implementations. Another example: handling retries for bad
connection to the database server.&lt;/li&gt;
&lt;li&gt;If backends add optional capabilities, these can be selectively utilized in
the backend-independent layer without exposing them directly to the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="registering-drivers"&gt;
&lt;h2&gt;Registering drivers&lt;/h2&gt;
&lt;p&gt;Another interesting aspect of the design of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; is how database
drivers register themselves with the main package. It's a nice example of
implementing &lt;em&gt;compile-time plugins&lt;/em&gt; in Go.&lt;/p&gt;
&lt;p&gt;As the code sample at the top of this post shows, &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; knows about
the imported drivers' names, and can open them by name with &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt;. How
does that work?&lt;/p&gt;
&lt;p&gt;The trick is in the blank import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it doesn't actually import any names from the package, it does invoke its
&lt;tt class="docutils literal"&gt;init&lt;/tt&gt; function, which in case of &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;SQLiteDriver&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;sql.go&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Register&lt;/tt&gt; adds a mapping from a string name to an
implementation of the &lt;tt class="docutils literal"&gt;driver.Driver&lt;/tt&gt; interface; the mapping is in a global
map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RWMutex&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Register makes a database driver available by the provided name.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// If Register is called twice with the same name or if driver is nil,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// it panics.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sql: Register driver is nil&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sql: Register called twice for driver &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; is called, it looks up the name in the &lt;tt class="docutils literal"&gt;drivers&lt;/tt&gt; map and can
then instantiate a &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; object with the proper driver implementation attached.
You can also call the &lt;tt class="docutils literal"&gt;sql.Drivers&lt;/tt&gt; function at any time to get the names of
all the registered drivers.&lt;/p&gt;
&lt;p&gt;This approach implements a &lt;em&gt;compile-time&lt;/em&gt; plugin, because the &lt;tt class="docutils literal"&gt;import&lt;/tt&gt;s for
the included backends happen when the Go code is compiled. The binary has a
fixed set of database drivers built into it. Go also has support for &lt;em&gt;run-time&lt;/em&gt;
plugins, but that is a topic for a separate post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-types-with-the-scanner-interface"&gt;
&lt;h2&gt;Custom types with the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface&lt;/h2&gt;
&lt;p&gt;Another interesting architectural feature of the &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package is
supporting storage and retrieval of custom types in the database. The
&lt;tt class="docutils literal"&gt;Rows.Scan&lt;/tt&gt; method is typically used to read columns from a row. It takes a
sequence of &lt;tt class="docutils literal"&gt;interface{}&lt;/tt&gt; to be generic, using a type switch underneath to
select the right reader depending on the type of an argument.&lt;/p&gt;
&lt;p&gt;For customization, &lt;tt class="docutils literal"&gt;Rows.Scan&lt;/tt&gt; supports types that implement the
&lt;tt class="docutils literal"&gt;sql.Scanner&lt;/tt&gt; interface, and then invokes their &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; method to perform
the actual data read.&lt;/p&gt;
&lt;p&gt;One built-in example is &lt;tt class="docutils literal"&gt;sql.NullString&lt;/tt&gt;. If we try to &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; a column into
a &lt;tt class="docutils literal"&gt;string&lt;/tt&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and that column has a &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt; value, we'll get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sql: Scan error on column index 1, name &amp;quot;username&amp;quot;:
    unsupported Scan, storing driver.Value type &amp;lt;nil&amp;gt; into type *string
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can avoid this by using a &lt;tt class="docutils literal"&gt;sql.NullString&lt;/tt&gt; instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NullString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;tt class="docutils literal"&gt;username&lt;/tt&gt; will have its &lt;tt class="docutils literal"&gt;Valid&lt;/tt&gt; field set to &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; for a &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;
column. This works because &lt;tt class="docutils literal"&gt;NullString&lt;/tt&gt; implements the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface.&lt;/p&gt;
&lt;p&gt;A more interesting example involves types that are specific to certain database
backends. For example, while PostgrSQL supports &lt;a class="reference external" href="https://www.postgresql.org/docs/9.1/arrays.html"&gt;array types&lt;/a&gt;, some other databases (like
SQLite) do not. So &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; cannot support array types natively, but
features like the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface make it possible for user code to
interact with such data fairly easily anyway.&lt;/p&gt;
&lt;p&gt;To extend the previous example, suppose our rows also have a list of activities
(as strings) for each user &lt;a class="footnote-reference" href="#sql3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. Then the &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; would go like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NullString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;activities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pq.Array&lt;/tt&gt; function is provided by the &lt;a class="reference external" href="https://godoc.org/github.com/lib/pq"&gt;pq PostgreSQL binding&lt;/a&gt;. It takes a slice and converts it to an
anonymous type that implements the &lt;tt class="docutils literal"&gt;sql.Scanner&lt;/tt&gt; interface.&lt;/p&gt;
&lt;p&gt;This is a nice way to &lt;em&gt;escape the abstraction&lt;/em&gt; when necessary. Even though it's
great to have a uniform interface to access many kinds of databases, sometimes
we really do want to use a specific DB with its specific features. It would be
a shame to give up &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; in this case, and we don't have to - because
of these features that let specific database backends provide custom behavior.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="sql1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Assuming we only use standard SQL syntax in our queries that both
databases support, of course.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="sql2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I first encountered an explicit discussion of this pattern in the
&lt;a class="reference external" href="https://github.com/google/go-cloud"&gt;Go CDK project&lt;/a&gt;, which I recently
joined. The Go CDK uses a similar approach for its portable
types, and its &lt;a class="reference external" href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#portable-types-and-drivers"&gt;design documentation&lt;/a&gt;
calls it the &lt;em&gt;portable type and driver pattern&lt;/em&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="sql3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I realize that multi-valued fields are not good relational design. This
is just an example.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Databases"></category><category term="Plugins"></category></entry><entry><title>Flexible runtime interface to shared libraries with libffi</title><link href="https://eli.thegreenplace.net/2013/03/04/flexible-runtime-interface-to-shared-libraries-with-libffi" rel="alternate"></link><published>2013-03-04T05:36:09-08:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2013-03-04:/2013/03/04/flexible-runtime-interface-to-shared-libraries-with-libffi</id><summary type="html">
        &lt;p&gt;Calling code from shared libraries in C is simple with &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;LoadLibrary&lt;/tt&gt; on Windows). I provided a comprehensive example in the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/24/plugins-in-c/"&gt;article on Plugins in C&lt;/a&gt;; here, I'll start with a simplified example.&lt;/p&gt;
&lt;p&gt;Here's a sample C library compiled into &lt;tt class="docutils literal"&gt;libsomelib.so&lt;/tt&gt;. First, the header file &lt;tt class="docutils literal"&gt;somelib.h&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#ifndef â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
        &lt;p&gt;Calling code from shared libraries in C is simple with &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;LoadLibrary&lt;/tt&gt; on Windows). I provided a comprehensive example in the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/24/plugins-in-c/"&gt;article on Plugins in C&lt;/a&gt;; here, I'll start with a simplified example.&lt;/p&gt;
&lt;p&gt;Here's a sample C library compiled into &lt;tt class="docutils literal"&gt;libsomelib.so&lt;/tt&gt;. First, the header file &lt;tt class="docutils literal"&gt;somelib.h&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#ifndef SOMELIB_H&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#define SOMELIB_H&lt;/span&gt;

&lt;span style="color: #00007f; font-weight: bold"&gt;typedef&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;struct&lt;/span&gt; {
    &lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; num;
    &lt;span style="color: #00007f; font-weight: bold"&gt;double&lt;/span&gt; dnum;
} DataPoint;

DataPoint add_data(&lt;span style="color: #00007f; font-weight: bold"&gt;const&lt;/span&gt; DataPoint* dps, &lt;span style="color: #00007f; font-weight: bold"&gt;unsigned&lt;/span&gt; n);

&lt;span style="color: #007f00"&gt;#endif /* SOMELIB_H */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the implementation, &lt;tt class="docutils literal"&gt;somelib.c&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#include &amp;quot;somelib.h&amp;quot;&lt;/span&gt;

DataPoint &lt;span style="color: #00007f"&gt;add_data&lt;/span&gt;(&lt;span style="color: #00007f; font-weight: bold"&gt;const&lt;/span&gt; DataPoint* dps, &lt;span style="color: #00007f; font-weight: bold"&gt;unsigned&lt;/span&gt; n) {
    DataPoint out = {.num = &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;, .dnum = &lt;span style="color: #007f7f"&gt;0.0&lt;/span&gt;};

    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; (&lt;span style="color: #00007f; font-weight: bold"&gt;unsigned&lt;/span&gt; i = &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;; i &amp;lt; n; ++i) {
        out.num += dps[i].num;
        out.dnum += dps[i].dnum;
    }

    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; out;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dynamically loading &lt;tt class="docutils literal"&gt;libsomelib.so&lt;/tt&gt; at runtime and calling &lt;tt class="docutils literal"&gt;add_data&lt;/tt&gt; from C code is straightforward:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style="color: #007f00"&gt;#include &amp;quot;somelib.h&amp;quot;&lt;/span&gt;

&lt;span style="color: #007f00"&gt;// Prototype for a function pointer for add_data&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;typedef&lt;/span&gt; DataPoint (*add_data_fn_t)(&lt;span style="color: #00007f; font-weight: bold"&gt;const&lt;/span&gt; DataPoint* dps, &lt;span style="color: #00007f; font-weight: bold"&gt;unsigned&lt;/span&gt; n);

&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; &lt;span style="color: #00007f"&gt;main&lt;/span&gt;(&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; argc, &lt;span style="color: #00007f; font-weight: bold"&gt;const&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* argv[])
{
    &lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt;* libhandle = dlopen(&lt;span style="color: #7f007f"&gt;&amp;quot;./libsomelib.so&amp;quot;&lt;/span&gt;, RTLD_LAZY);
    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (!libhandle) {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;dlopen error: %s\n&amp;quot;&lt;/span&gt;, dlerror());
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;dlopen success: handle %p\n&amp;quot;&lt;/span&gt;, libhandle);

    &lt;span style="color: #007f00"&gt;// We know the prototype of add_data so we can directly assign it to a&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// function pointer of the correct type.&lt;/span&gt;
    add_data_fn_t add_data_fn = dlsym(libhandle, &lt;span style="color: #7f007f"&gt;&amp;quot;add_data&amp;quot;&lt;/span&gt;);
    &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* err = dlerror();
    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (err) {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;dlsym failed: %s\n&amp;quot;&lt;/span&gt;, err);
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    DataPoint dp[&lt;span style="color: #007f7f"&gt;4&lt;/span&gt;] = {{&lt;span style="color: #007f7f"&gt;2&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;2.2&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;3&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;3.3&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;4&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;4.4&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;5&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;5.5&lt;/span&gt;}};

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;Calling add_data\n&amp;quot;&lt;/span&gt;);
    DataPoint dout = add_data_fn(dp, &lt;span style="color: #00007f; font-weight: bold"&gt;sizeof&lt;/span&gt;(dp) / &lt;span style="color: #00007f; font-weight: bold"&gt;sizeof&lt;/span&gt;(DataPoint));

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;dout = {%d, %lf}\n&amp;quot;&lt;/span&gt;, dout.num, dout.dnum);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works great. However, note a certain lack of flexibility. While the shared library can be discovered and loaded at runtime, the interface of the function we call from it has to be defined statically, &lt;em&gt;at compile time&lt;/em&gt; - this is the function pointer prototype in the snippet above.&lt;/p&gt;
&lt;p&gt;But what if we want the interface to be dynamic as well? In other words, what if we don't know &lt;em&gt;until runtime&lt;/em&gt; what arguments the called function accepts? Alas, if standard C is all we have, we're stuck. The problem is that to call a function properly, the compiler has to know what arguments it accepts to translate the call to the proper machine code sequence according to the system's calling convention. When I disassemble both &lt;tt class="docutils literal"&gt;add_data&lt;/tt&gt; and the call in &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;, I see this call sequence, which is in accordance with the System V AMD64 ABI &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dps&lt;/tt&gt; is passed in &lt;tt class="docutils literal"&gt;%rdi&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;n&lt;/tt&gt; is passed in &lt;tt class="docutils literal"&gt;%esi&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;return value is in &lt;tt class="docutils literal"&gt;%xmm0&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So to call a function whose signature is determined at runtime, we'd have to implement the calling convention ourselves, packing the arguments into registers and stack as appropriate and unpacking the return value. Moreover, this has to be implemented for each platform the code runs on. And it goes beyond saying that such code is not portable since standard C does not provide direct access to the stack or to the registers.&lt;/p&gt;
&lt;p&gt;Luckily, a library exists that implements all of this for us.&lt;/p&gt;
&lt;div class="section" id="libffi"&gt;
&lt;h3&gt;libffi&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; was designed to solve precisely the problem described above - provide a means to call a function from a shared object, while deciding &lt;em&gt;at runtime&lt;/em&gt; which arguments the function accepts and which value it returns. Conceivably this can be useful for C code dynamically invoking other C code &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;, but the main users of &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; are dynamic VM languages. Python uses &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; in its &lt;tt class="docutils literal"&gt;ctypes&lt;/tt&gt; library, and other languages like Java, Ruby and Scheme use it in similar C FFI (Foreign Function Interface) libraries.&lt;/p&gt;
&lt;p&gt;Without further ado, here's a version of the main program from above that uses &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; to call &lt;tt class="docutils literal"&gt;add_data&lt;/tt&gt; from its shared library:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;ffi.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style="color: #007f00"&gt;#include &amp;quot;somelib.h&amp;quot;  // For the DataPoint type.&lt;/span&gt;

&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; &lt;span style="color: #00007f"&gt;main&lt;/span&gt;(&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; argc, &lt;span style="color: #00007f; font-weight: bold"&gt;const&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* argv[])
{
    &lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt;* libhandle = dlopen(&lt;span style="color: #7f007f"&gt;&amp;quot;./libsomelib.so&amp;quot;&lt;/span&gt;, RTLD_LAZY);
    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (!libhandle) {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;dlopen error: %s\n&amp;quot;&lt;/span&gt;, dlerror());
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;dlopen success: handle %p\n&amp;quot;&lt;/span&gt;, libhandle);

    &lt;span style="color: #007f00"&gt;// Assuming we don&amp;#39;t know the prototype of add_data at compile-time, we&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// have to save the output of dlsym in a void* and then prepare the&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// calling sequence using libffi.&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt;* add_data_fn = dlsym(libhandle, &lt;span style="color: #7f007f"&gt;&amp;quot;add_data&amp;quot;&lt;/span&gt;);
    &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* err = dlerror();
    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (err) {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;dlsym failed: %s\n&amp;quot;&lt;/span&gt;, err);
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    &lt;span style="color: #007f00"&gt;// Describe the function arguments. Note that ffi_type_pointer is used&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// for any C pointer (the pointee type does not matter in the ABI).&lt;/span&gt;
    ffi_type* args[] = {&amp;amp;ffi_type_pointer, &amp;amp;ffi_type_uint};

    &lt;span style="color: #007f00"&gt;// Describe the DataPoint struct to libffi. Elements are described by a&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// NULL-terminated array of pointers to ffi_type.&lt;/span&gt;
    ffi_type* dp_elements[] = {&amp;amp;ffi_type_sint, &amp;amp;ffi_type_double, &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;};
    ffi_type dp_type = {.size = &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;, .alignment = &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;,
                        .type = FFI_TYPE_STRUCT, .elements = dp_elements};

    &lt;span style="color: #007f00"&gt;// Describe the interface of add_data to libffi.&lt;/span&gt;
    ffi_cif cif;
    ffi_status status = ffi_prep_cif(&amp;amp;cif, FFI_DEFAULT_ABI, &lt;span style="color: #007f7f"&gt;2&lt;/span&gt;, &amp;amp;dp_type,
                                     args);
    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (status != FFI_OK) {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;ffi_prep_cif failed: %d\n&amp;quot;&lt;/span&gt;, status);
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    &lt;span style="color: #007f00"&gt;// The avalues argument of ffi_call holds the addresses of arguments.&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// Since our first argument is a pointer itself, we can&amp;#39;t just pass&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// &amp;amp;dp (since in C &amp;amp;array == array). So we create a pointer to dp and&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;// pass its address.&lt;/span&gt;
    DataPoint dp[&lt;span style="color: #007f7f"&gt;4&lt;/span&gt;] = {{&lt;span style="color: #007f7f"&gt;2&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;2.2&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;3&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;3.3&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;4&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;4.4&lt;/span&gt;}, {&lt;span style="color: #007f7f"&gt;5&lt;/span&gt;, &lt;span style="color: #007f7f"&gt;5.5&lt;/span&gt;}};
    DataPoint* pdp = dp;
    &lt;span style="color: #00007f; font-weight: bold"&gt;unsigned&lt;/span&gt; nelems = &lt;span style="color: #00007f; font-weight: bold"&gt;sizeof&lt;/span&gt;(dp) / &lt;span style="color: #00007f; font-weight: bold"&gt;sizeof&lt;/span&gt;(DataPoint);
    &lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt;* values[] = {&amp;amp;pdp, &amp;amp;nelems};

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;Calling add_data via libffi\n&amp;quot;&lt;/span&gt;);
    DataPoint dout;
    ffi_call(&amp;amp;cif, FFI_FN(add_data_fn), &amp;amp;dout, values);

    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;dout = {%d, %lf}\n&amp;quot;&lt;/span&gt;, dout.num, dout.dnum);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is heavily commented, so it should be easy to figure out what's going on. I just want to focus on a few interesting points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The shared library is loaded as before. &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; are used. The result of &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; is just placed in a &lt;tt class="docutils literal"&gt;void*&lt;/tt&gt;, since we don't know the actual function pointer signature at compile time.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;somelib.h&lt;/tt&gt; is included just for the definition of the &lt;tt class="docutils literal"&gt;DataPoint&lt;/tt&gt; type, since we want to actually pass data to &lt;tt class="docutils literal"&gt;add_data&lt;/tt&gt; and get a result.&lt;/li&gt;
&lt;li&gt;The signature of &lt;tt class="docutils literal"&gt;add_data&lt;/tt&gt; is described dynamically, at runtime, by filling the &lt;tt class="docutils literal"&gt;ffi_cif&lt;/tt&gt; data structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In terms of its implementation, &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; does as much as possible in portable C, but eventually has to resort to assembly routines written for each architecture and calling convention it supports. There routines perform the actual register and stack modifications around the call to the given function to make sure the call conforms to the calling convention. Note also that due to this extra work, calls via &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; are much slower than direct calls created by the compiler. In theory, it's possible to use JIT-ing to dynamically generate efficient calling code once the function signature is known, but AFAIK &lt;tt class="docutils literal"&gt;libffi&lt;/tt&gt; does not implement this.&lt;/p&gt;
&lt;img class="align-center" src="https://eli.thegreenplace.net/images/hline.jpg" style="width: 320px; height: 5px;" /&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I've compiled this example on my x64 Linux machine.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I'm curious to hear about use cases, though. It seems to me that if you want to call code from C and don't even know the function signatures at compile time, other solutions (like serializing the arguments and return values, or some sort of message passing) is more commonplace.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

    </content><category term="misc"></category><category term="C &amp; C++"></category><category term="Plugins"></category></entry><entry><title>Plugins in C</title><link href="https://eli.thegreenplace.net/2012/08/24/plugins-in-c" rel="alternate"></link><published>2012-08-24T04:43:33-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2012-08-24:/2012/08/24/plugins-in-c</id><summary type="html">
        &lt;p&gt;This is the second article in the series about plugin infrastructures.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/"&gt;kickoff article&lt;/a&gt; of this series, I defined some fundamental concepts we can use when talking about plugins. I also showed an example of a simple but complete plugin system for an application, all written in Python. But â€¦&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;This is the second article in the series about plugin infrastructures.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/"&gt;kickoff article&lt;/a&gt; of this series, I defined some fundamental concepts we can use when talking about plugins. I also showed an example of a simple but complete plugin system for an application, all written in Python. But see, Python has the unfortunate (?) habit of making everything look too easy. To really show the guts of a plugin infrastructure, we'll switch to C.&lt;/p&gt;
&lt;p&gt;C is the perfect &amp;quot;other extreme&amp;quot; to Python. It's the most low level of the mainstream programming languages, and almost universally serves as glue between other languages and systems. Understanding how plugins may work in C will help us understand how to implement cross-language plugins in the future.&lt;/p&gt;
&lt;div class="section" id="getting-started-the-task"&gt;
&lt;h3&gt;Getting started - the task&lt;/h3&gt;
&lt;p&gt;I've re-implemented the &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; program from the &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/"&gt;previous article&lt;/a&gt; entirely in C, including a plugin mechanism and the same two sample plugins. The full code is far too large to fit in an article; you can download it along with a &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; for Linux &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2012/plugins_c_samples"&gt;from here&lt;/a&gt; &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basics-of-plugins-in-c"&gt;
&lt;h3&gt;Basics of plugins in C&lt;/h3&gt;
&lt;p&gt;Plugins in C are almost always implemented as DSOs (Dynamic Shared Objects, aka. shared libraries, or DLLs on Windows). While C itself is a relatively rigid language, DSOs provide it with a degree of dynamism that helps a lot for developing plugins &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;. Namely, the dynamic loading mechanism provided by the OS allows us to add new code to our programs to execute at runtime. The basic idea is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The main application can load additional DSOs which represent plugins.&lt;/li&gt;
&lt;li&gt;Each plugin has a well-known symbol (function and/or global variable) the application knows about and thus can load it dynamically from the DSO.&lt;/li&gt;
&lt;li&gt;From here on, it's like any shared libary - the plugin can call into application code, and the application can call into plugin code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of the article will explain these topics in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fundamental-concepts"&gt;
&lt;h3&gt;The fundamental concepts&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/"&gt;fundamental concepts of plugin infrastructures&lt;/a&gt; will help me explain how the C implementation of &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; works. A quick reminder of the concepts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Discovery&lt;/li&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;li&gt;Application hooks to which plugins attach&lt;/li&gt;
&lt;li&gt;Exposing application capabilities back to plugins&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What follows is a detailed examination of how each concept is implemented in this example.&lt;/p&gt;
&lt;div class="section" id="discovery-registration"&gt;
&lt;h4&gt;Discovery &amp;amp; registration&lt;/h4&gt;
&lt;p&gt;The main application has a known directory in which it looks for plugin DSOs. In my implementation this directory's location is relative to the working directory, but it could be anywhere, really. It can also be specified in some kind of configuration file - many applications follow this route.&lt;/p&gt;
&lt;p&gt;Once it knows the directory, the application goes over all files in it and looks for files that appear to be plugins - files ending with the &lt;tt class="docutils literal"&gt;.so&lt;/tt&gt; extension, the convention for DSOs on Linux. It then tries to load these files with &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt;. Here's the relevant portion of the code &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;// Make sure the path to dlopen has a slash, for it to consider it&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// an actual filesystem path and not just a lookup name.&lt;/span&gt;
dstring slashedpath = dstring_format(&lt;span style="color: #7f007f"&gt;&amp;quot;./%s&amp;quot;&lt;/span&gt;, dstring_cstr(fullpath));

&lt;span style="color: #007f00"&gt;// Attempt to open the plugin DSO&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt;* libhandle = dlopen(dstring_cstr(slashedpath), RTLD_NOW);
dstring_free(slashedpath);
&lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (!libhandle) {
    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;Error loading DSO: %s\n&amp;quot;&lt;/span&gt;, dlerror());
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The story doesn't end here, however. To register itself with the application, a valid plugin is expected to have an initialization function which the application will call. The function's name must be &lt;tt class="docutils literal"&gt;init_&amp;lt;pluginname&amp;gt;&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;pluginname&lt;/tt&gt; is the name of the plugin file without the &lt;tt class="docutils literal"&gt;.so&lt;/tt&gt; extension. Take the &lt;tt class="docutils literal"&gt;tt.so&lt;/tt&gt; plugin, for example. Its (non-static) initialization function must be named &lt;tt class="docutils literal"&gt;init_tt&lt;/tt&gt;. This is the code that looks for the init function in the DSO:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;// Attempt to find the init function and then call it&lt;/span&gt;
dstring initfunc_name = dstring_format(&lt;span style="color: #7f007f"&gt;&amp;quot;init_%s&amp;quot;&lt;/span&gt;, dstring_cstr(name));
&lt;span style="color: #007f00"&gt;// dlsym returns void*, but we obviously need to cast it to a function&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// pointer to be able to call it. Since void* and function pointers are&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// mutually inconvertible in the eyes of C99, and -pedantic complains about&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// a plain cast, we cast through a pointer-sized integer.&lt;/span&gt;
PluginInitFunc initfunc = (PluginInitFunc)
    (&lt;span style="color: #00007f; font-weight: bold"&gt;intptr_t&lt;/span&gt;) dlsym(libhandle, dstring_cstr(initfunc_name));
dstring_free(initfunc_name);
&lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (!initfunc) {
    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;Error loading init function: %s\n&amp;quot;&lt;/span&gt;, dlerror());
    dlclose(libhandle);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type &lt;tt class="docutils literal"&gt;PluginInitFunc&lt;/tt&gt; is:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;typedef&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; (*PluginInitFunc)(PluginManager*);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; is a central piece of the infrastructure; I will discuss it in more detail later. For now, it suffices to say that it is the interface between the application and plugins.&lt;/p&gt;
&lt;p&gt;Anyhow, once the init function is successfully found in the plugin DSO, the application calls it, passing it a pointer to &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt;. The init function is expected to return a non-negative value if everything is OK:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; rc = initfunc(pm);
&lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (rc &amp;lt; &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;) {
    printf(&lt;span style="color: #7f007f"&gt;&amp;quot;Error: Plugin init function returned %d\n&amp;quot;&lt;/span&gt;, rc);
    dlclose(libhandle);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, the plugin was discovered and has registered itself with the application - it was loaded from a shared library, and the initialization function was found and executed successfully.&lt;/p&gt;
&lt;p&gt;All of the above is implemented in the &lt;tt class="docutils literal"&gt;plugin_discovery&lt;/tt&gt; module (a pair of &lt;tt class="docutils literal"&gt;.h&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;.c&lt;/tt&gt; files).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-hooks"&gt;
&lt;h4&gt;Application hooks&lt;/h4&gt;
&lt;p&gt;This is the place to discuss &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt;. It's an object in the C sense of the word - the interface exposes an opaque data type and some functions that operate on it (it's all in &lt;tt class="docutils literal"&gt;plugin_manager.h/c&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; is used both by the application and by plugins. Plugins use it to register hooks. The application uses it to find all registered hooks and execute them. Similarly to the Python version of &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt;, there are two kinds of hooks - a hook for specific roles, and a hook for the whole contents. Here are the relevant callback function prototypes:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;// Role hook. Will be called with: the role contents, DB and Post objects.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;typedef&lt;/span&gt; dstring (*PluginRoleHook)(dstring, DB*, Post*);

&lt;span style="color: #007f00"&gt;// Contents hook. Will be called with: post contents, DB and Post objects.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;typedef&lt;/span&gt; dstring (*PluginContentsHook)(dstring, DB*, Post*);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; arguments - we'll discuss them later. These are the registration functions plugins can use to add hooks:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;// Register a hook for a specific role.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// Note: rolename is copied to an internal data structure.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt; PluginManager_register_role_hook(PluginManager* pm, dstring rolename,
                                      PluginRoleHook hook);

&lt;span style="color: #007f00"&gt;// Register a hook for contents.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;void&lt;/span&gt; PluginManager_register_contents_hook(PluginManager* pm,
                                          PluginContentsHook hook);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the right time to show the full code of the &lt;tt class="docutils literal"&gt;tt.so&lt;/tt&gt; plugin, which registers itself for the &lt;tt class="docutils literal"&gt;tt&lt;/tt&gt; role, wrapping its contents in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;tt&amp;gt;...&amp;lt;/tt&amp;gt;&lt;/span&gt;&lt;/tt&gt; tags:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;static&lt;/span&gt; dstring &lt;span style="color: #00007f"&gt;tt_role_hook&lt;/span&gt;(dstring str, DB* db, Post* post) {
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; dstring_format(&lt;span style="color: #7f007f"&gt;&amp;quot;&amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;quot;&lt;/span&gt;, dstring_cstr(str));
}


&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; &lt;span style="color: #00007f"&gt;init_tt&lt;/span&gt;(PluginManager* pm) {
    dstring rolename = dstring_new(&lt;span style="color: #7f007f"&gt;&amp;quot;tt&amp;quot;&lt;/span&gt;);
    PluginManager_register_role_hook(pm, rolename, tt_role_hook);
    dstring_free(rolename);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #007f7f"&gt;1&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The initialization function of the plugin (which, recall, must be called &lt;tt class="docutils literal"&gt;init_tt&lt;/tt&gt; to be found) registers a role hook for the &lt;tt class="docutils literal"&gt;tt&lt;/tt&gt; role with the plugin manager, and returns 1 for success. The hook itself is a simple function that performs the required transformation &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For completeness, this is the &amp;quot;application side&amp;quot; of the plugin manager API:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;// Apply the registered role hooks to the given rolename/rolecontents,&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// returning the string that should replace the role.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// The first plugin that agrees to handle this role is used. If no such plugin&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// is found, NULL is returned.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
dstring PluginManager_apply_role_hooks(PluginManager* pm,
                                       dstring rolename, dstring rolecontents,
                                       DB* db, Post* post);

&lt;span style="color: #007f00"&gt;// Apply the registered contents hooks to the given contents, returning&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// the transformed contents.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// All registered hooks are composed:&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//  while (has_plugins)&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//      contents = apply_next_plugin(contents)&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
&lt;span style="color: #007f00"&gt;// If no contents plugin exists, NULL is returned.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;//&lt;/span&gt;
dstring PluginManager_apply_contents_hooks(PluginManager* pm, dstring contents,
                                           DB* db, Post* post);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look into &lt;tt class="docutils literal"&gt;plugin_manager.c&lt;/tt&gt;, you'll see that the implementation of these functions is pretty simple. &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; holds lists of registered hooks, and the &lt;tt class="docutils literal"&gt;PluginManager_apply_*&lt;/tt&gt; functions simply walk these lists applying the hooks, when the application requests it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exposing-application-capabilities-back-to-plugins"&gt;
&lt;h4&gt;Exposing application capabilities back to plugins&lt;/h4&gt;
&lt;p&gt;We've already seen an example of this above. The &lt;tt class="docutils literal"&gt;PluginManager&lt;/tt&gt; API has a plugin-facing component for registering hooks, which technically is an application capability exposed to plugins. But there's more; I want to reimplement the same mock &amp;quot;database&amp;quot; API I used in the Python example, since it provides a very realistic example and is applicable in many situations.&lt;/p&gt;
&lt;p&gt;At this point it's interesting to highlight an important difference between Python and C. In Python, due to duck typing, one module can just pass an object to another and the other module doesn't have to have any type information about this object - it can just call its methods. In C, things are not that easy. Therefore, to use the &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; objects, plugins need to include the application header file defining them (&lt;tt class="docutils literal"&gt;db.h&lt;/tt&gt;). Note that due to the nature of dynamic linking on Linux, plugins don't have to actually link with the &lt;tt class="docutils literal"&gt;db.o&lt;/tt&gt; object. More on this later.&lt;/p&gt;
&lt;p&gt;To demonstrate this in code, here's a part of the &lt;tt class="docutils literal"&gt;narcissist.so&lt;/tt&gt; plugin which turns all occurrences of &amp;quot;I&amp;quot; to &amp;quot;&amp;lt;b&amp;gt;I (username)&amp;lt;/b&amp;gt;&amp;quot;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007f00"&gt;#include &amp;quot;db.h&amp;quot;&lt;/span&gt;

&lt;span style="color: #00007f; font-weight: bold"&gt;static&lt;/span&gt; dstring &lt;span style="color: #00007f"&gt;narcissist_contents_hook&lt;/span&gt;(dstring str, DB* db, Post* post) {
    dstring replacement = dstring_format(&lt;span style="color: #7f007f"&gt;&amp;quot;&amp;lt;b&amp;gt;I (%s)&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt;,
                            dstring_cstr(Post_get_author(post)));
    ...
    ...
}

&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; &lt;span style="color: #00007f"&gt;init_narcissist&lt;/span&gt;(PluginManager* pm) {
    PluginManager_register_contents_hook(pm, narcissist_contents_hook);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #007f7f"&gt;1&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All hooks get passed pointers to &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; objects. The plugin then uses the &lt;tt class="docutils literal"&gt;db.h&lt;/tt&gt; API to access the &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; object - in this case the &lt;tt class="docutils literal"&gt;Post_get_author&lt;/tt&gt; function, which extracts the username from the post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="some-details-of-plugin-implementation-in-c"&gt;
&lt;h3&gt;Some details of plugin implementation in C&lt;/h3&gt;
&lt;p&gt;The above concludes the description of how the &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; application with its plugins is implemented in C. Here, I want to complete a few low-level implementation details that may be interesting to readers. These are things that make plugin implementation in C trickier than in Python, since in C you have to manually deal with much more details.&lt;/p&gt;
&lt;div class="section" id="exporting-symbols-from-the-application-to-plugins"&gt;
&lt;h4&gt;Exporting symbols from the application to plugins&lt;/h4&gt;
&lt;p&gt;Here are the compiler invocations required to build the &lt;tt class="docutils literal"&gt;tt.so&lt;/tt&gt; plugin:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;gcc -c plugins/tt.c -o plugins/tt.o -pedantic -g -Wall -std=c99 -fpic -I.
gcc -o plugins/tt.so plugins/tt.o -shared
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a standard Linux DSO build: the sources are compiled with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-fpic&lt;/span&gt;&lt;/tt&gt; to generate &lt;a class="reference external" href="https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/"&gt;position-independent code&lt;/a&gt;, and the DSO itself is built with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-shared&lt;/span&gt;&lt;/tt&gt;  which tells the linker to create a shared library.&lt;/p&gt;
&lt;p&gt;When creating a DSO with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-shared&lt;/span&gt;&lt;/tt&gt;, we don't have to link in object files that will be found in the application that loads the DSO. The plugin uses symbols from a number of object files - &lt;tt class="docutils literal"&gt;dstring.o&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;db.o&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;plugin_manager.o&lt;/tt&gt;. Let's see how this looks in the symbol table:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;$ readelf --dyn-syms plugins/narcissist.so

Symbol table &amp;#39;.dynsym&amp;#39; contains 23 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 0000000000000798     0 SECTION LOCAL  DEFAULT    9
     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND dstring_len
     3: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND dstring_new_len
    &amp;lt;snip&amp;gt;
     8: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND Post_get_author
    &amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the &lt;em&gt;dynamic symbol table&lt;/em&gt;, a section used by the dynamic linker on Linux for symbol management. Here it says that the symbols &lt;tt class="docutils literal"&gt;dstring_len&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Post_get_author&lt;/tt&gt; and others and undefined. The dynamic linker will expect to find them in the application loading the DSO. Otherwise, we'll get a symbol resolution error at runtime.&lt;/p&gt;
&lt;p&gt;There's an important gotcha here. The linker will not export symbols from an application to plugins by default. It has to be explicitly told to do so by means of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--export-dynamic&lt;/span&gt;&lt;/tt&gt; linker flag. Here's a portion of the &lt;tt class="docutils literal"&gt;ld&lt;/tt&gt; manual page that describes this flag very well:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;--export-dynamic
--no-export-dynamic
    When creating a dynamically linked executable, using the -E
    option or the --export-dynamic option causes the linker to add
    all symbols to the dynamic symbol table.  The dynamic symbol
    table is the set of symbols which are visible from dynamic
    objects at run time.

    If you do not use either of these options (or use the
    --no-export-dynamic option to restore the default behavior),
    the dynamic symbol table will normally contain only those
    symbols which are referenced by some dynamic object mentioned
    in the link.

    If you use &amp;quot;dlopen&amp;quot; to load a dynamic object which needs to
    refer back to the symbols defined by the program, rather
    than some other dynamic object, then you will probably need
    to use this option when linking the program itself.

    You can also use the dynamic list to control what symbols
    should be added to the dynamic symbol table if the output
    format supports it. See the description of --dynamic-list.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This behavior is easy to observe in our example, if you're interested. The main application &lt;tt class="docutils literal"&gt;htmlize_main&lt;/tt&gt; is currently compiled with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--export-dynamic&lt;/span&gt;&lt;/tt&gt; flag. If you look at its dynamic symbol table (&lt;tt class="docutils literal"&gt;readelf &lt;span class="pre"&gt;--dyn-syms&lt;/span&gt;&lt;/tt&gt;), you'll see all global symbols exported. Recompile it without the flag, and you can check that the dynamic symbol table won't contain these symbols, and the &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; call in &lt;tt class="docutils literal"&gt;plugin_discovery.c&lt;/tt&gt; will fail with &amp;quot;undefined symbol&amp;quot; errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="symbol-visibility-between-plugins"&gt;
&lt;h4&gt;Symbol visibility between plugins&lt;/h4&gt;
&lt;p&gt;We've seen that special provision is required for the application's symbols to be visible inside pligins. The same is true about symbol visibility between plugins, though here the mechanism is different.&lt;/p&gt;
&lt;p&gt;When the application loads a plugin with &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt;, the plugin's symbols can be found by calling &lt;tt class="docutils literal"&gt;dlsym&lt;/tt&gt; in the application. However, what if other plugins need to use these symbols as well? By default, that won't work. To make it work, it's possible to pass the &lt;tt class="docutils literal"&gt;RTLD_GLOBAL&lt;/tt&gt; flag to &lt;tt class="docutils literal"&gt;dlopen&lt;/tt&gt; when opening the plugin we want to expose the symbols from. Symbols in this plugin DSO will be made available to resolve references in subsequently loaded DSOs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cross-dso-memory-allocation"&gt;
&lt;h4&gt;Cross-DSO memory allocation&lt;/h4&gt;
&lt;p&gt;It's not hard to see in the &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; example that some memory allocated in one DSO (or the main application), is released in another. Especially if you come from a Windows background, this may raise an eyebrow.&lt;/p&gt;
&lt;p&gt;Cross-DSO memory allocation is most likely wrong when the C library is linked statically. This is because each DSO gets its own version of the C library, with its own book-keeping for &lt;tt class="docutils literal"&gt;malloc&lt;/tt&gt; et al, so memory allocated in one DSO can't be released in another.&lt;/p&gt;
&lt;p&gt;However, on Linux it's customary to link the C library dynamically. This is what happens by default, unless you &lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/13/how-statically-linked-programs-run-on-linux/"&gt;explicitly request static linking&lt;/a&gt;. When linked dynamically, only a single version of the C library symbols exists in the process's address space during execution, and cross-DSO memory allocations and releases are safe.&lt;/p&gt;
&lt;img class="align-center" src="https://eli.thegreenplace.net/images/hline.jpg" style="width: 320px; height: 5px;" /&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The code was developed with gcc version 4.6 and binutils 2.22 on Ubuntu 12.04, although it should be easily adaptable to other Linux and Unix flavors. For Windows the porting would be more challenging. That said, while the details differ, the concepts on Windows would be pretty much the same.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This article assumes a basic level of familiarity with developing shared libraries for Linux in C. If you're not familiar with the topic, google for some resources.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note the usage of &lt;tt class="docutils literal"&gt;dstring&lt;/tt&gt; - it's a simple dynamic string implementation in C which I'm using as part of the application. It's bundled with the code of this example. In general, the code in this example does not attempt to be efficient - a lot of string copying and reallocation is being done. For a more efficient representation of this task, I would probably use a rope data structure.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that the hook itself is a static function - it is not exported from the DSO by the linker. However, its address can still be given to the application by &lt;tt class="docutils literal"&gt;init_tt&lt;/tt&gt;. This is good programming practice - hide as much as possible.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content><category term="misc"></category><category term="C &amp; C++"></category><category term="Plugins"></category></entry><entry><title>Fundamental concepts of plugin infrastructures</title><link href="https://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures" rel="alternate"></link><published>2012-08-07T17:31:09-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2012-08-07:/2012/08/07/fundamental-concepts-of-plugin-infrastructures</id><summary type="html">
        &lt;p&gt;I have always been fascinated by the idea of &lt;em&gt;plugins&lt;/em&gt; - user-developed modules that are not part of the core application, but that nevertheless allow extending the application's capabilities. Many applications above a certain size  allow some level of customization by users. There are many different approaches and many names for â€¦&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;I have always been fascinated by the idea of &lt;em&gt;plugins&lt;/em&gt; - user-developed modules that are not part of the core application, but that nevertheless allow extending the application's capabilities. Many applications above a certain size  allow some level of customization by users. There are many different approaches and many names for it (extensions, scripting interface, modules, components); I'll simply say &amp;quot;plugins&amp;quot; from now on.&lt;/p&gt;
&lt;p&gt;The fun thing about plugins is that they cross application and language domains. You can find plugin infrastructures for everything ranging from IDEs, to web servers to games. Plugins can be developed in language X extending an application mainly based on language Y, for a wide variety of X and Y.&lt;/p&gt;
&lt;p&gt;My plan is to explore the design space of plugin infrastructures, looking at various implementation strategies and existing solutions in well-known applications. But for that, I need to first describe some basic terms and concepts - a &lt;em&gt;common language&lt;/em&gt; that will let us reason about plugins.&lt;/p&gt;
&lt;div class="section" id="example-plugins-for-a-python-application"&gt;
&lt;h3&gt;Example - plugins for a Python application&lt;/h3&gt;
&lt;p&gt;I'll start with an example, by presenting a simple application and a plugin infrastructure for it. Both the application and plugins will be coded in Python 3.&lt;/p&gt;
&lt;p&gt;Let's start by introducing the task. The example is a small but functional part of some kind of a publishing system, let's say a &lt;em&gt;blogging engine&lt;/em&gt;. It's the part that turns marked-up text into HTML. To borrow from &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;, the supported markup is:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;before markup :role:`&lt;code&gt;text&lt;/code&gt;` after markup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &amp;quot;role&amp;quot; defines the mark-up type, and &amp;quot;text&amp;quot; is the text to which the mark-up is applied. Sample roles (again, from &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/roles.html"&gt;reST interpreted roles&lt;/a&gt;) are &lt;tt class="docutils literal"&gt;code&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;math&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;superscript&lt;/tt&gt; &lt;a class="footnote-reference" href="#id8" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, where do plugins come in here? The idea is to let the core application do the text parsing, leaving the specific role implementation to plugins. In other words, I'd like to enable plugin writers to easily add roles to the application. This is what the idea of plugins is all about: instead of hard-coding the application's functionality, let users extend it. Power users love customizing applications for their specific needs, and may improve your application beyond your original intentions. From your point of view, it's like getting work done for free - a win-win situation.&lt;/p&gt;
&lt;p&gt;Anyway, there are a myriad ways to implement plugins in Python &lt;a class="footnote-reference" href="#id9" id="id2"&gt;[2]&lt;/a&gt;. I like the following approach:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00007f"&gt;IPluginRegistry&lt;/span&gt;(&lt;span style="color: #00007f"&gt;type&lt;/span&gt;):
    plugins = []
    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;__init__&lt;/span&gt;(cls, name, bases, attrs):
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; name != &lt;span style="color: #7f007f"&gt;&amp;#39;IPlugin&amp;#39;&lt;/span&gt;:
            IPluginRegistry.plugins.append(cls)

&lt;span style="color: #00007f; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00007f"&gt;IPlugin&lt;/span&gt;(&lt;span style="color: #00007f"&gt;object&lt;/span&gt;, metaclass=IPluginRegistry):
    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;__init__&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, post=&lt;span style="color: #00007f"&gt;None&lt;/span&gt;, db=&lt;span style="color: #00007f"&gt;None&lt;/span&gt;):
        &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Initialize the plugin. Optinally provide the db.Post that is&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;            being processed and the db.DB it belongs to.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style="color: #00007f"&gt;self&lt;/span&gt;.post = post
        &lt;span style="color: #00007f"&gt;self&lt;/span&gt;.db = db

    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Plugin classes inherit from IPlugin. The methods below can be&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        implemented to provide services.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;get_role_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, role_name):
        &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Return a function accepting role contents.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;            The function will be called with a single argument - the role&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;            contents, and should return what the role gets replaced with.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;            None if the plugin doesn&amp;#39;t provide a hook for this role.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A plugin is a class that inherits from &lt;tt class="docutils literal"&gt;IPlugin&lt;/tt&gt;. Some metaclass trickery makes sure that by the very act of inheriting from it, the plugin &lt;em&gt;registers&lt;/em&gt; itself in the system.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;get_role_hook&lt;/tt&gt; method is an example of a &lt;em&gt;hook&lt;/em&gt;. A hook is something an application exposes, and plugins can attach to. By attaching to a hook (in our case - implementing the &lt;tt class="docutils literal"&gt;get_role_hook&lt;/tt&gt; method), the plugin can let the application know it wants to participate in the relevant task. Here, a plugin implementing the hook will get called by the application to find out which roles it supports.&lt;/p&gt;
&lt;p&gt;Here is a sample plugin:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00007f"&gt;TtFormatter&lt;/span&gt;(IPlugin):
    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Acts on the &amp;#39;tt&amp;#39; role, placing the contents inside &amp;lt;tt&amp;gt; tags.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;get_role_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, role_name):
        &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;self&lt;/span&gt;._tt_hook &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; role_name == &lt;span style="color: #7f007f"&gt;&amp;#39;tt&amp;#39;&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #00007f"&gt;None&lt;/span&gt;

    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;_tt_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, contents):
        &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;lt;tt&amp;gt;&amp;#39;&lt;/span&gt; + contents + &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;lt;/tt&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It implements the following transformation:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;text :tt:`&lt;code&gt;in tt tag&lt;/code&gt;` here
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;text &amp;lt;tt&amp;gt;in tt tag&amp;lt;/tt&amp;gt; here
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, I chose to let the hook return a function. This is useful since it can give the application immediate indication of whether the plugin supports some role at all (if it returns &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, it doesn't). The application can also cache the function returned by plugins for more efficient invocation later. There are, of course, many variations on this theme. For example, the plugin could return a list of all the roles it supports.&lt;/p&gt;
&lt;p&gt;Now it would be interesting to see how plugins are &lt;em&gt;discovered&lt;/em&gt;, i.e. how does the application know which plugins are present in the system? Again, Python's dynamism lets us easily implement a very flexible discovery scheme:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;discover_plugins&lt;/span&gt;(dirs):
    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Discover the plugin classes contained in Python files, given a&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        list of directory names to scan. Return a list of plugin classes.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; &lt;span style="color: #00007f"&gt;dir&lt;/span&gt; &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; dirs:
        &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; filename &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; os.listdir(&lt;span style="color: #00007f"&gt;dir&lt;/span&gt;):
            modname, ext = os.path.splitext(filename)
            &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; ext == &lt;span style="color: #7f007f"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;:
                &lt;span style="color: #00007f"&gt;file&lt;/span&gt;, path, descr = imp.find_module(modname, [&lt;span style="color: #00007f"&gt;dir&lt;/span&gt;])
                &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #00007f"&gt;file&lt;/span&gt;:
                    &lt;span style="color: #007f00"&gt;# Loading the module registers the plugin in&lt;/span&gt;
                    &lt;span style="color: #007f00"&gt;# IPluginRegistry&lt;/span&gt;
                    mod = imp.load_module(modname, &lt;span style="color: #00007f"&gt;file&lt;/span&gt;, path, descr)
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; IPluginRegistry.plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function can be used by the applications to find and load plugins. It gets a list of directories in which to look for Python modules. Each module is loaded, which executes the class definitions within it. Those classes that inherit from &lt;tt class="docutils literal"&gt;IPlugin&lt;/tt&gt; get registered with &lt;tt class="docutils literal"&gt;IPluginRegistry&lt;/tt&gt;, which can then be queried.&lt;/p&gt;
&lt;p&gt;You will notice that the constructor of &lt;tt class="docutils literal"&gt;IPlugin&lt;/tt&gt; takes two optional arguments - &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;db&lt;/tt&gt;. For plugins that have more than just the most basic capabilities, the application should also expose an API to itself which would let the plugins query and manipulate it. The &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;db&lt;/tt&gt; arguments do that - each plugin will get a &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; object that represents the blog post it operates upon, as well as a &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; object that represents the main blog database.&lt;/p&gt;
&lt;p&gt;To see how these can be used by a plugin, let's add another hook to &lt;tt class="docutils literal"&gt;IPlugin&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;get_contents_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;):
    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; Return a function accepting full document contents.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        The functin will be called with a single argument - the document&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        contents (after paragraph splitting and role processing), and&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        should return the transformed contents.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        None if the plugin doesn&amp;#39;t provide a hook for this role.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This hook allows plugins to register functions that transform the whole contents  of a post, not just text marked-up with roles &lt;a class="footnote-reference" href="#id10" id="id3"&gt;[3]&lt;/a&gt;. Here's a sample plugin that uses it:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00007f"&gt;Narcissist&lt;/span&gt;(IPlugin):
    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;__init__&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, post, db):
        &lt;span style="color: #00007f"&gt;super&lt;/span&gt;().__init__(post, db)
        &lt;span style="color: #00007f"&gt;self&lt;/span&gt;.repl = &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;lt;b&amp;gt;I ({0})&amp;lt;/b&amp;gt;&amp;#39;&lt;/span&gt;.format(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;.post.author)

    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;get_contents_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;):
        &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #00007f"&gt;self&lt;/span&gt;._contents_hook

    &lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;_contents_hook&lt;/span&gt;(&lt;span style="color: #00007f"&gt;self&lt;/span&gt;, contents):
        &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; re.sub(&lt;span style="color: #7f007f"&gt;r&amp;#39;\bI\b&amp;#39;&lt;/span&gt;, &lt;span style="color: #00007f"&gt;self&lt;/span&gt;.repl, contents)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As its name suggests, this is a plugin for users with narcissistic tendencies. It finds all the occurrences of &amp;quot;I&amp;quot; in the text, adds the author name in parens and puts it in bold. The idea here is to show how the &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; object passed to the plugin can be used to access information from the application. Exposing such details to plugins makes the infrastructure extremely flexible.&lt;/p&gt;
&lt;p&gt;Finally, let's see how the application actually uses the plugins. Here's a simple &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt; function that gets a &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;db&lt;/tt&gt; objects, as well as a list of plugins. It does its own transformation of the post contents by enclosing all paragraphs in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/tt&gt; tags and then hands the job over to the plugins, first running the role-specific hooks and then the whole contents hooks &lt;a class="footnote-reference" href="#id11" id="id4"&gt;[4]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight" style="background: #ffffff"&gt;&lt;pre style="line-height: 125%"&gt;RoleMatch = namedtuple(&lt;span style="color: #7f007f"&gt;&amp;#39;RoleMatch&amp;#39;&lt;/span&gt;, &lt;span style="color: #7f007f"&gt;&amp;#39;name contents&amp;#39;&lt;/span&gt;)


&lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;htmlize&lt;/span&gt;(post, db, plugins=[]):
    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; pass&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    contents = post.contents

    &lt;span style="color: #007f00"&gt;# Plugins are classes - we need to instantiate them to get objects.&lt;/span&gt;
    plugins = [P(post, db) &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; P &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; plugins]

    &lt;span style="color: #007f00"&gt;# Split the contents to paragraphs&lt;/span&gt;
    paragraphs = re.split(&lt;span style="color: #7f007f"&gt;r&amp;#39;\n\n+&amp;#39;&lt;/span&gt;, contents)
    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; i, p &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; &lt;span style="color: #00007f"&gt;enumerate&lt;/span&gt;(paragraphs):
        paragraphs[i] = &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; + p.replace(&lt;span style="color: #7f007f"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;, &lt;span style="color: #7f007f"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) + &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;

    contents = &lt;span style="color: #7f007f"&gt;&amp;#39;\n\n&amp;#39;&lt;/span&gt;.join(paragraphs)

    &lt;span style="color: #007f00"&gt;# Find roles in the contents. Create a list of parts, where each&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;# part is either text that has no roles in it, or a RoleMatch&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;# object.&lt;/span&gt;
    pos = &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;
    parts = []
    &lt;span style="color: #00007f; font-weight: bold"&gt;while&lt;/span&gt; &lt;span style="color: #00007f"&gt;True&lt;/span&gt;:
        match = ROLE_REGEX.search(contents, pos)
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; match &lt;span style="color: #0000aa"&gt;is&lt;/span&gt; &lt;span style="color: #00007f"&gt;None&lt;/span&gt;:
            parts.append(contents[pos:])
            &lt;span style="color: #00007f; font-weight: bold"&gt;break&lt;/span&gt;
        parts.append(contents[pos:match.start()])
        parts.append(RoleMatch(match.group(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;), match.group(&lt;span style="color: #007f7f"&gt;2&lt;/span&gt;)))
        pos = match.end()

    &lt;span style="color: #007f00"&gt;# Ask plugins to act on roles&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; i, part &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; &lt;span style="color: #00007f"&gt;enumerate&lt;/span&gt;(parts):
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #00007f"&gt;isinstance&lt;/span&gt;(part, RoleMatch):
            parts[i] = _plugin_replace_role(
                            part.name, part.contents, plugins)

    &lt;span style="color: #007f00"&gt;# Build full contents back again, and ask plugins to act on&lt;/span&gt;
    &lt;span style="color: #007f00"&gt;# contents.&lt;/span&gt;
    contents = &lt;span style="color: #7f007f"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(parts)
    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; p &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; plugins:
        contents_hook = p.get_contents_hook()
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; contents_hook:
            contents = contents_hook(contents)

    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; contents

&lt;span style="color: #00007f; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00007f"&gt;_plugin_replace_role&lt;/span&gt;(name, contents, plugins):
    &lt;span style="color: #7f007f"&gt;&amp;quot;&amp;quot;&amp;quot; The first plugin that handles this role is used.&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; p &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; plugins:
        role_hook = p.get_role_hook(name)
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; role_hook:
            &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; role_hook(contents)
    &lt;span style="color: #007f00"&gt;# If no plugin handling this role is found, return its original form&lt;/span&gt;
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #7f007f"&gt;&amp;#39;:{0}:`&lt;code&gt;{1}&lt;/code&gt;`&amp;#39;&lt;/span&gt;.format(name, contents)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're interested in the code, this sample application (with a simple driver that discovers plugins by calling &lt;tt class="docutils literal"&gt;discover_plugins&lt;/tt&gt; and calls &lt;tt class="docutils literal"&gt;htmlize&lt;/tt&gt;) can be download &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2012/plugins_python"&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fundamental-plugin-concepts"&gt;
&lt;h3&gt;Fundamental plugin concepts&lt;/h3&gt;
&lt;p&gt;Having read about plugins and studied the code of many applications, it became clear to me that to describe a certain plugin infrastructure you really need to look just at 4 fundamental concepts &lt;a class="footnote-reference" href="#id12" id="id5"&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Discovery&lt;/li&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;li&gt;Application hooks to which plugins attach (aka. &amp;quot;mount points&amp;quot;)&lt;/li&gt;
&lt;li&gt;Exposing application capabilities back to plugins (aka. extension API)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are some areas of overlap between these (e.g. sometimes it's hard to distinguish discovery from registration), but I believe that together they cover over 95% of what one needs to understand when studying a specific application's plugin infrastructure.&lt;/p&gt;
&lt;div class="section" id="discovery"&gt;
&lt;h4&gt;Discovery&lt;/h4&gt;
&lt;p&gt;This is the mechanism by which a running application can find out which plugins it has at its disposal. To &amp;quot;discover&amp;quot; a plugin, one has to look in certain places, and also know what to look for. In our example, the &lt;tt class="docutils literal"&gt;discover_plugins&lt;/tt&gt; function implements this - plugins are Python classes that inherit from a known base class, contained in modules located in known places.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="registration"&gt;
&lt;h4&gt;Registration&lt;/h4&gt;
&lt;p&gt;This is the mechanism by which a plugin tells an application - &amp;quot;I'm here, ready to do work&amp;quot;. Admittedly, registration usually has a large overlap with discovery, but I still want to keep the two concepts separate since it makes things more explicit (not in all languages registration is as automatic as our example demonstrates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hooks"&gt;
&lt;h4&gt;Hooks&lt;/h4&gt;
&lt;p&gt;Hooks are also called &amp;quot;mount points&amp;quot; or &amp;quot;extension points&amp;quot;. These are the places where the plugin can &amp;quot;attach&amp;quot; itself to the application, signaling that it wants to know about certain events and participate in the flow. The exact nature of hooks is very much dependent on the application. In our example, hooks allow plugins to intervene in the text-to-HTML transformation process performed by the application. The example also demonstrates both &lt;em&gt;coarse grained&lt;/em&gt; hooks (processing whole posts) and &lt;em&gt;fine grained&lt;/em&gt; hooks (processing only certain marked-up chunks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exposing-an-application-api-to-plugins"&gt;
&lt;h4&gt;Exposing an application API to plugins&lt;/h4&gt;
&lt;p&gt;To make plugins truly powerful and versatile, the application needs to give them access to itself, by means of exposing an API the plugins can use. In our example the API is relatively simple - the application simply passes some of its own internal objects to the plugins. APIs tend to get much more complex when multiple languages are involved. I hope to show some interesting examples in future articles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="examining-some-well-known-applications"&gt;
&lt;h3&gt;Examining some well-known applications&lt;/h3&gt;
&lt;p&gt;Now that we have the concepts well-defined, I want to finish this article by examining the plugin infrastructures of a couple of very common applications. Both are written in high-level languages, which makes the infrastructure relatively simple. I will present more complex infrastructures in future articles, once I cover the technical details of implementing plugins in C or C++.&lt;/p&gt;
&lt;div class="section" id="mercurial"&gt;
&lt;h4&gt;Mercurial&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mercurial"&gt;Mercurial&lt;/a&gt; (Hg) is a popular VCS (Version Control System), written in Python. Mercurial is well known for its extensibility - a lot of its functionality is provided by Python &lt;em&gt;extensions&lt;/em&gt;. Some extensions became popular enough to be distributed with the core application, and some need to be downloaded separately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discovery:&lt;/strong&gt; extensions that the user wants loaded have to be explicitly listed in the &lt;tt class="docutils literal"&gt;[extensions]&lt;/tt&gt; section of the Mercurial configuration file (&lt;tt class="docutils literal"&gt;.hgrc&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registration:&lt;/strong&gt; extensions are Python modules that export certain functions (e.g. &lt;tt class="docutils literal"&gt;uisetup&lt;/tt&gt;) and values (e.g. &lt;tt class="docutils literal"&gt;cmdtable&lt;/tt&gt;) Mercurial looks for. The existence of any one such function or value amounts to registering the extension with Mercurial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hooks:&lt;/strong&gt; top-level functions like &lt;tt class="docutils literal"&gt;uisetup&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;extsetup&lt;/tt&gt; serve as coarse-grained hooks. Finer-grained hooks can be explicitly registered by calling, for example, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ui.setconfig('hooks',&lt;/span&gt; &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt; on a &lt;em&gt;ui&lt;/em&gt; object passed into &lt;tt class="docutils literal"&gt;uisetup&lt;/tt&gt; and command callbacks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application API:&lt;/strong&gt; Mercurial application objects like &lt;em&gt;ui&lt;/em&gt; and &lt;em&gt;repo&lt;/em&gt; passed to hooks provide a means to query the application and act on its behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wordpress"&gt;
&lt;h4&gt;Wordpress&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Wordpress"&gt;Wordpress&lt;/a&gt; is the most popular blogging engine on the internet, and possibly the most popular content management system overall. It's written in PHP, and its extensive plugin system (plugins are also written in PHP) are arguably its most important feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discovery:&lt;/strong&gt; plugins must be &lt;tt class="docutils literal"&gt;.php&lt;/tt&gt; files (or directories with such files) placed in the special directory &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-content/plugins&lt;/span&gt;&lt;/tt&gt;. They must contain a special comment with metadata at the top, which Wordpress uses to recognize them as valid plugins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registration &amp;amp; Hooks:&lt;/strong&gt; plugins register themselves by adding hooks via special API calls. The hooks are of two kinds - filters and actions. Filters are very similar to the plugins shown in our example (transform text to its final form). Actions are more generic and allows plugins to piggy-back on many different operations Wordpress is performing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application API:&lt;/strong&gt; Wordpress exposes its internals to plugins rather bluntly. The core application objects (such as &lt;tt class="docutils literal"&gt;$wpdb&lt;/tt&gt;) are simply available as globals for the plugins to use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This article's main goal was to define a common language to reason about plugins. The four concepts should provide one with a tool to examine and study the plugin infrastructure of a given application: 1) how are plugins discovered, 2) how do they register themselves with the application, 3) which hooks can plugins utilize to extend the application and 4) what API does the application expose to plugins.&lt;/p&gt;
&lt;p&gt;The examples presented here were mainly about Python applications with Python plugins (with the Wordpress example being PHP, which is on about the same level of expressivity as Python). Plugins for static languages, and especially cross-language plugins provide more implementation challenges. In future articles I aim to examine some implementation strategies for plugins in C, C++ and mixed static-dynamic languages, as well as study the  plugin infrastructures of some well-known applications.&lt;/p&gt;
&lt;img class="align-center" src="https://eli.thegreenplace.net/images/hline.jpg" style="width: 320px; height: 5px;" /&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Simpler mark-up like surrounding text with asterisks (i.e. &lt;tt class="docutils literal"&gt;*italic*&lt;/tt&gt;) can be supported similarly, but I wanted to focus on plugins here, not text parsing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And any other language, for that purpose. This is probably why there are very few well-established plugin frameworks in existence (even in low-level languages like C or C++). It's too easy (and tempting) to roll your own.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Naturally, there's a tradeoff here. On one hand, this hook enables very elaborate transformations by the plugins. On the other hand, the application doesn't give much to the plugin - each plugin should parse the contents itself. Compare this to &lt;tt class="docutils literal"&gt;get_role_hook&lt;/tt&gt;, where the application does the parsing itself and passes the plugin just the role and its contents.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that it makes no attempt being efficient. For example, there's no real use in asking plugins about the roles they know every single time - this information can be cached.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Since the following discussion is somewhat abstract, I deliberately started the article with an example. It should provide a tangible base to relate the concepts to.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

    </content><category term="misc"></category><category term="Plugins"></category><category term="Python"></category></entry></feed>