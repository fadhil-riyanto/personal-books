<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eli Bendersky's website - Databases</title><link href="https://eli.thegreenplace.net/" rel="alternate"></link><link href="https://eli.thegreenplace.net/feeds/databases.atom.xml" rel="self"></link><id>https://eli.thegreenplace.net/</id><updated>2024-10-08T02:16:59-07:00</updated><entry><title>Linearizability in distributed systems</title><link href="https://eli.thegreenplace.net/2024/linearizability-in-distributed-systems/" rel="alternate"></link><published>2024-10-07T19:16:00-07:00</published><updated>2024-10-08T02:16:59-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-10-07:/2024/linearizability-in-distributed-systems/</id><summary type="html">&lt;p&gt;Linearizability is a strong &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Consistency_model"&gt;consistency model&lt;/a&gt;
in concurrent and distributed systems. From the paper introducing it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Linearizability provides the illusion that each operation applied by
concurrent processes takes effect instantaneously at some point between
its invocation and its response.&lt;/blockquote&gt;
&lt;p&gt;On first reading (and probably on the second and third â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linearizability is a strong &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Consistency_model"&gt;consistency model&lt;/a&gt;
in concurrent and distributed systems. From the paper introducing it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Linearizability provides the illusion that each operation applied by
concurrent processes takes effect instantaneously at some point between
its invocation and its response.&lt;/blockquote&gt;
&lt;p&gt;On first reading (and probably on the second and third...) this sounds a bit
abstract, but it really is all there is to it. A slightly different way to
think about it is - a linearizable system appears as if there's only one copy
of data in existence, and all client operations apply to this data atomically.
This post dives deeper into what this means in practice.&lt;/p&gt;
&lt;div class="section" id="registers"&gt;
&lt;h2&gt;Registers&lt;/h2&gt;
&lt;p&gt;Linearizability is a &lt;em&gt;single-object&lt;/em&gt; consistency model (see the &amp;quot;Linearizability
vs. Serializability&amp;quot; section below for more on this).
It's common in distributed systems literature to talk
about a &lt;em&gt;register&lt;/em&gt; - a single key-value pair, for example, stored in some
distributed database. When clients write and read this register concurrently,
we can analyze the history of operations and their results and determine if
the system maintains linearizability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-example"&gt;
&lt;h2&gt;Basic example&lt;/h2&gt;
&lt;p&gt;The following diagram describes a sequence of register reads and writes by
three different clients; some of these operations are done concurrently. Time
flows from left to right, and a colored rectangle denotes an operation; its
left edge is the operation's start, and its right edge the operation's
completion &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Linearizable history scenario 1" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc1.png" /&gt;
&lt;p&gt;Here are the events, each with its own number in the yellow bubble:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Client A reads the register and gets the value of 0. The read itself
happened at some point in time in the database, denoted on the timeline
in the very bottom of the diagram.&lt;/li&gt;
&lt;li&gt;Client B reads the value 0. Note that this read operation is partially
concurrent with the write operation (3); concurrent operations can execute
in any order, but here (2) happened to be executed before (3) (we know
this because the value 0 was read, not 1).&lt;/li&gt;
&lt;li&gt;Client C writes 1 into the register.&lt;/li&gt;
&lt;li&gt;Client A reads 1 from the register. This read is also concurrent with the
write, and thus could end up with any result, but since the result in this
timeline is 1, we know it happened after (3).&lt;/li&gt;
&lt;li&gt;Client B reads 1 from the register.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This sequence of events is valid in a linearizable system, because we can
construct a serial history of events (the bottom timeline) that's consistent
with our results. Each event occurs instantaneously at some point between the
start and finish of the client request.&lt;/p&gt;
&lt;p&gt;Compare this to the following sequence, which is not valid:&lt;/p&gt;
&lt;img alt="Linearizable history scenario 2" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc2.png" /&gt;
&lt;p&gt;This sequence is similar to the first one, with one difference: B's read in
(5) results in 0. Since (5) is concurrent with (3), when seen in isolation
this isn't unreasonable. However, since in (4), client A already observed
the value 1 in the register and (4) happens before (5), this sequence is
invalid in a linearizable system. We can imagine systems with weaker
consistency guarantees producing this history, but such systems are not
linearizable.&lt;/p&gt;
&lt;p&gt;Another way to look at it is examine the timeline in the bottom of the diagram.
Notice that (5) reads 0, after (3) happened. We just can't find a way to
arrange this history so it looks sequential - therefore, it's inconsistent
with linearizability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-subtle-example"&gt;
&lt;h2&gt;A more subtle example&lt;/h2&gt;
&lt;p&gt;Here's a more subtle example, taken from the linearizability paper:&lt;/p&gt;
&lt;img alt="Linearizable history scenario 3" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc3.png" /&gt;
&lt;p&gt;This sequence of events is invalid for a linearizable system! To
understand why, let's follow the timeline at the bottom of the diagram.&lt;/p&gt;
&lt;p&gt;(3) Client B's write of 1 executes before (2) client A's read, because A
reads 1 from the register. If the read at (2) happened before the write
at (3), it (the read) would result in 0, not 1.&lt;/p&gt;
&lt;p&gt;Event (4) has to happen after event (2), since it starts after (2) ends.
But we've just reasoned that (2) happens after (3); therefore, (4) happens
after (3) - even though these two writes are concurrent, their order is
imposed by observing other events.&lt;/p&gt;
&lt;p&gt;Finally, since we've just proven that (4) happens after (3), the value in the
register at the conclusion of (3) is 0, not 1; therefore, the read of 1 in (5)
is invalid. This system cannot be linearizable. As before, you can try
to arrange the events in the bottom of the diagram into some sequential order -
this attempt will fail, because no consistent sequential order can account
for the observed events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-formal-definition"&gt;
&lt;h2&gt;A formal definition&lt;/h2&gt;
&lt;p&gt;I personally found the formal definition of linearizability in the Herlihy &amp;amp;
Wang paper somewhat obscured by attention given to potentially unfinished
operations. If we assume that every operation has a start and an end, it's
easier to restate the formal definition as follows.&lt;/p&gt;
&lt;p&gt;An operation &lt;em&gt;e&lt;/em&gt; has the timestamps &lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt;; these are the
left and right boundaries of the rectangles in the diagrams shown above.&lt;/p&gt;
&lt;p&gt;A history &lt;em&gt;H&lt;/em&gt; exists with a strong partial order &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; on operations &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;:
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/da680da9f55778b0b7ae1936f4f9d9e83f7686cb.svg" style="height: 13px;" type="image/svg+xml"&gt;e_0 &amp;lt;_H e_1&lt;/object&gt; if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/98d60fef24c45831a1c414f7c97ef09d586c7a02.svg" style="height: 19px;" type="image/svg+xml"&gt;end(e_0)&lt;/object&gt; precedes &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/c4a35986d620d327ab562a7d0a5a603e11425181.svg" style="height: 19px;" type="image/svg+xml"&gt;start(e_1)&lt;/object&gt; in &lt;em&gt;H&lt;/em&gt;.
Operations unrelated by &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; are said to be &lt;em&gt;concurrent&lt;/em&gt; in H.
In our diagrams, &lt;em&gt;H&lt;/em&gt; represents the observed history (the part of the diagram
with the overlapping rectangles). The formal definition captures what it
means for us to know that some operations precede others, while other operations
are concurrent.&lt;/p&gt;
&lt;p&gt;For example, in our last diagram above if &lt;em&gt;H&lt;/em&gt; is the history shown, then
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/ee5009cacbd76077cf901db78a83bf5014f6c7c0.svg" style="height: 13px;" type="image/svg+xml"&gt;e_3 &amp;lt;_H e_5&lt;/object&gt;, but the pair &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/bc1f891fff9987dabf9906aa81786141b784d60a.svg" style="height: 12px;" type="image/svg+xml"&gt;e_3,e_4&lt;/object&gt; is not in the relation
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt;, since these operations are concurrent.&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;H&lt;/em&gt; is a sequential history, then &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; is a &lt;em&gt;total order&lt;/em&gt;. It means
there are no concurrent operations.&lt;/p&gt;
&lt;p&gt;Now it's time for the definition of linearizability. &lt;em&gt;H&lt;/em&gt; is linearizable if:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;H&lt;/em&gt; is equivalent to some sequential history &lt;em&gt;S&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/21bc4a1cae8b4f606a98282c4c93be246a3673fb.svg" style="height: 14px;" type="image/svg+xml"&gt;&amp;lt;_H \subseteq &amp;lt;_S&lt;/object&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second item requires a bit of elaboration: recall that &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; and
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cdd6694fe341fc295fff7257a7031c88365c1bf8.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_S&lt;/object&gt; are &lt;em&gt;relations&lt;/em&gt;. &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; being a subset of &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cdd6694fe341fc295fff7257a7031c88365c1bf8.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_S&lt;/object&gt; means
that the partial order of operations in the real-time history &lt;em&gt;H&lt;/em&gt; is preserved
in the linearization.&lt;/p&gt;
&lt;p&gt;We then call &lt;em&gt;S&lt;/em&gt; the &lt;em&gt;linearization of H&lt;/em&gt;. In our diagrams, &lt;em&gt;S&lt;/em&gt; is the bottom
line where operations are shown on the server happening immediately; they are
still represented by &lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt; in the history (we can just assume
&lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt; are infinitesimally close in time, since the DB applies
operations atomically).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linearizability-vs-serializability"&gt;
&lt;h2&gt;Linearizability vs. Serializability&lt;/h2&gt;
&lt;p&gt;Linearizability is often confused with &lt;em&gt;serializability&lt;/em&gt; - another consistency
model. The two are fundamentally different, though:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Serializability is a multi-object property useful to describe transactions
that consist of multiple operations that may potentially touch multiple
objects; informally, it means that transactions happen atomically, and their
sub-operations cannot be observed in isolation or intermix.&lt;/li&gt;
&lt;li&gt;Linearizability is a single-object property, talking about the observed
effects on a single register, as this post demonstrates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a great taxonomy of consistency models, see &lt;a class="reference external" href="https://jepsen.io/consistency"&gt;this page from Jepsen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;Kyle Kingsbury - on his blog and through his company Jepsen - has a wealth of
great resources on the subject of linearizability and other consistency models.
Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;The taxonomy&lt;/a&gt;, as mentioned above,
and the related &lt;a class="reference external" href="https://aphyr.com/posts/313-strong-consistency-models"&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Knossos, a linearizability checker: &lt;a class="reference external" href="https://aphyr.com/posts/309-knossos-redis-and-linearizability"&gt;blog post&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/jepsen-io/knossos"&gt;project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jepsen's &lt;a class="reference external" href="https://jepsen.io/analyses/etcd-3.4.3"&gt;analysis of etcd&lt;/a&gt; has
an interesting practical discussion of linearizability in a real-world system&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Herlihy, Maurice P.; Wing, Jeannette M. (1990).
&amp;quot;Linearizability: A Correctness Condition for Concurrent Objects&amp;quot;.
ACM Transactions on Programming Languages and Systems.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The operation itself happens instantaneously on the server at some
moment within the rectangle's boundaries, but we don't know exactly when
due to network delays.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For a refresher on the math used here (relations, orders) see
&lt;a class="reference external" href="https://eli.thegreenplace.net/2018/partial-and-total-orders/"&gt;this post&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Concurrency"></category><category term="Network Programming"></category><category term="Databases"></category></entry><entry><title>Accessing PostgreSQL databases in Go</title><link href="https://eli.thegreenplace.net/2021/accessing-postgresql-databases-in-go/" rel="alternate"></link><published>2021-07-17T06:20:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2021-07-17:/2021/accessing-postgresql-databases-in-go/</id><summary type="html">&lt;p&gt;This post discusses some options for accessing PostgreSQL databases from Go.
I'll only be covering low-level packages that provide access to the underlying
database; this post is not about ORMs, which were &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/to-orm-or-not-to-orm/"&gt;covered earlier in this blog&lt;/a&gt;. The full source
code accompanying this post is &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We're going to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post discusses some options for accessing PostgreSQL databases from Go.
I'll only be covering low-level packages that provide access to the underlying
database; this post is not about ORMs, which were &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/to-orm-or-not-to-orm/"&gt;covered earlier in this blog&lt;/a&gt;. The full source
code accompanying this post is &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We're going to be using a simple data model that could serve as a basis for
an online course system (like Coursera):&lt;/p&gt;
&lt;img alt="DB schema for the online course system" class="align-center" src="https://eli.thegreenplace.net/images/2021/mooc-dbschema.png" /&gt;
&lt;p&gt;There is a many-to-many relationship between courses and users (a user can take
any number of courses, and each course has multiple users signed up), and
a one-to-many relationship between courses and projects (a course has multiple
projects, but a project belongs to a single course).&lt;/p&gt;
&lt;p&gt;The SQL to create these tables is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bigserial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;zone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hashtags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bigserial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;bigint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bigserial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;course_user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;bigint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;cascade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;bigint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;cascade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;constraint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;course_user_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;tt class="docutils literal"&gt;hashtags&lt;/tt&gt; column is of the PostgreSQL array type: &lt;tt class="docutils literal"&gt;hashtags
text[]&lt;/tt&gt;; this is on purpose, to demonstrate how custom PostgreSQL types are
modeled in the various Go approaches presented here.&lt;/p&gt;
&lt;div class="section" id="database-sql-with-the-pq-driver"&gt;
&lt;h2&gt;database/sql with the pq driver&lt;/h2&gt;
&lt;p&gt;Probably the most common way to access PostgreSQL databases in Go is using the
standard library &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;, along with &lt;a class="reference external" href="https://github.com/lib/pq"&gt;pq&lt;/a&gt;
as the database driver. The full code for this approach, applied to our sample
database is available &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql/pq"&gt;here&lt;/a&gt;;
I'll present some relevant bits and pieces below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/lib/pq&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Check is a helper that terminates the program with err.Error() logged in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// case err is not nil.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MOOCDSN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ... use db here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's the usual blank import of the driver package, which registers itself
with &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;; thereafter, the &lt;tt class="docutils literal"&gt;&amp;quot;postgres&amp;quot;&lt;/tt&gt; name can be used as a
driver name to pass to &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt;. The path to the database is passed in an
env var; for example, it could be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MOOCDSN=postgres://testuser:testpassword@localhost/testmooc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the database was created with the name &lt;tt class="docutils literal"&gt;testmooc&lt;/tt&gt;, with the user
&lt;tt class="docutils literal"&gt;testuser&lt;/tt&gt; having access to it.&lt;/p&gt;
&lt;p&gt;Following this initialization, we can issue queries to the database via &lt;tt class="docutils literal"&gt;db&lt;/tt&gt;.
Before we look at sample queries, here's the data model translated to Go types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CreatedAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Hashtags&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that, unlike with ORMs, relationships between tables are not captured here.
A &lt;tt class="docutils literal"&gt;course&lt;/tt&gt; does not have a collection of &lt;tt class="docutils literal"&gt;project&lt;/tt&gt;s; this is something we
need to set up manually when querying the DB. Another thing to note is that
&lt;tt class="docutils literal"&gt;Hashtags&lt;/tt&gt; has the type &lt;tt class="docutils literal"&gt;[]string&lt;/tt&gt; which will be mapped to PostgreSQL's
&lt;tt class="docutils literal"&gt;text[]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here's a sample function wrapping an SQL query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dbAllCoursesForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;    select courses.id, courses.created_at, courses.title, courses.hashtags&lt;/span&gt;
&lt;span class="s"&gt;    from courses&lt;/span&gt;
&lt;span class="s"&gt;    inner join course_user on courses.id = course_user.course_id&lt;/span&gt;
&lt;span class="s"&gt;    where course_user.user_id = $1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hashtags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given a user ID, this function obtains all the courses the user is signed up
for, by &lt;tt class="docutils literal"&gt;join&lt;/tt&gt;-ing the courses table with the &lt;tt class="docutils literal"&gt;course_user&lt;/tt&gt; linking table.
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; requires reading the result of the query in a scanning loop,
and manually placing the results into structs; it's not aware of any mapping
between Go structs and SQL tables. PostgreSQL arrays are read by wrapping with a
&lt;tt class="docutils literal"&gt;pq.Array&lt;/tt&gt; type.&lt;/p&gt;
&lt;p&gt;Here's a slightly more involved query, which &lt;tt class="docutils literal"&gt;join&lt;/tt&gt;s three tables to
obtain all the projects the user has to finish (there could be multiple
projects per course, and a user could be signed up for multiple courses):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dbAllProjectsForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;    select projects.id, projects.name, projects.content&lt;/span&gt;
&lt;span class="s"&gt;    from courses&lt;/span&gt;
&lt;span class="s"&gt;    inner join course_user on courses.id = course_user.course_id&lt;/span&gt;
&lt;span class="s"&gt;    inner join projects on courses.id = projects.course_id&lt;/span&gt;
&lt;span class="s"&gt;    where course_user.user_id = $1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the SQL is more complicated, the rest of the code is almost identical to
the earlier function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pgx"&gt;
&lt;h2&gt;pgx&lt;/h2&gt;
&lt;p&gt;While &lt;tt class="docutils literal"&gt;pq&lt;/tt&gt; has been around for a long time and has served the Go community
well, it hasn't been very actively maintained recently. In fact, if you read
all the way to the end of its README, you'll find this in the Status section:&lt;/p&gt;
&lt;blockquote&gt;
This package is effectively in maintenance mode and is not actively
developed. Small patches and features are only rarely reviewed and merged.
We recommend using pgx which is actively maintained.&lt;/blockquote&gt;
&lt;p&gt;So what is &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt;? It's a &lt;a class="reference external" href="https://github.com/jackc/pgx"&gt;driver and toolkit for PostgreSQL&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pgx aims to be low-level, fast, and performant, while also enabling
PostgreSQL-specific features that the standard &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package does
not allow for.&lt;/p&gt;
&lt;p&gt;The driver component of pgx can be used alongside the standard
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; package has two distinct modes of operation:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It can serve as a standard driver for &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;It can serve as a direct interface to PostgreSQL, which isn't beholden to
the standard API of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;, and thus can employ PostgreSQL-specific
features and code paths.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To use option (1), we can reuse 99% of the previous sample (the
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; interface is really very well standardized!). All we have to
do is replace the driver import with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/jackc/pgx/v4/stdlib&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then change the &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; call to invoke the &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; driver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pgx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MOOCDSN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't have to update the rest of the code &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What about the direct interface? For this, we'll have to rejigger our code a
bit, since the types are slightly different. The full code for this is available
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql/pgx"&gt;here&lt;/a&gt;;
here are the salient changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pgx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MOOCDSN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt;, we call &lt;tt class="docutils literal"&gt;pgx.Connect&lt;/tt&gt; instead. When it's
time to query the DB, our function for grabbing all the courses a user is signed
up for would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dbAllCoursesForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pgx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;    select courses.id, courses.created_at, courses.title, courses.hashtags&lt;/span&gt;
&lt;span class="s"&gt;    from courses&lt;/span&gt;
&lt;span class="s"&gt;    inner join course_user on courses.id = course_user.course_id&lt;/span&gt;
&lt;span class="s"&gt;    where course_user.user_id = $1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hashtags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the Go struct types representing table entries remain exactly the
same. Reading query results with &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; is very similar to &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;,
but array types no longer need to be wrapped in &lt;tt class="docutils literal"&gt;pq.Array&lt;/tt&gt;, since &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt;
supports natively reading PostgreSQL arrays into Go slices.&lt;/p&gt;
&lt;p&gt;So, what do we get by using &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;? According to
the &lt;a class="reference external" href="https://github.com/jackc/pgx#features"&gt;feature list on its README&lt;/a&gt;, quite
a lot, including native support for custom PostgreSQL types, JSON, an advanced
connection pool and a whole slew of performance-oriented features. Most notably,
&lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; uses the PostgreSQL binary protocol directly for faster marshaling and
unmarshaling of types. According to &lt;a class="reference external" href="https://github.com/jackc/go_db_bench"&gt;pgx's benchmarks&lt;/a&gt;, there are considerable performance
differences in some cases &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sqlx"&gt;
&lt;h2&gt;sqlx&lt;/h2&gt;
&lt;p&gt;We've seen a few examples of non-trivial SQL queries being scanned into Go
objects so far; all of them involve the same pattern:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The query is submitted&lt;/li&gt;
&lt;li&gt;The result is iterated row by row&lt;/li&gt;
&lt;li&gt;Each row gets manually unmarshaled into struct fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the biggest complaints about &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; in Go is the verbosity
of this process; particularly the second and third steps above. Why can't we
just say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FillInQueryResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all, many packages in the Go standard library already work this way; for
example &lt;tt class="docutils literal"&gt;encoding/json&lt;/tt&gt;, etc. The reason is the variety of types SQL supports.
While JSON has relatively few supported types, SQL has many; moreover, SQL types
differ by database. Therefore, it was fairly tricky for the Go project to offer
such advanced scanning capabilities in the standard library, and we have to rely
on third-party packages instead.&lt;/p&gt;
&lt;p&gt;Luckily, an abundance of third-party packages exists just for this purpose.
One of the most prominent is &lt;a class="reference external" href="https://github.com/jmoiron/sqlx"&gt;sqlx&lt;/a&gt;. Let's
revisit our sample database querying code, this time using &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;. The full
code for this is available &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql/sqlx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The database setup code is very similar to the vanilla &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/jmoiron/sqlx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/lib/pq&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sqlx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MOOCDSN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ... use db here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sqlx.Open&lt;/tt&gt; wraps &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; and uses the same database driver registration
mechanism. The type it returns is &lt;tt class="docutils literal"&gt;sqlx.DB&lt;/tt&gt;, which extends &lt;tt class="docutils literal"&gt;sql.DB&lt;/tt&gt; with
some convenience methods. Here's our function to query all courses a user is
signed up for, this time using &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dbAllCoursesForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sqlx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;    select courses.id, courses.created_at, courses.title, courses.hashtags&lt;/span&gt;
&lt;span class="s"&gt;    from courses&lt;/span&gt;
&lt;span class="s"&gt;    inner join course_user on courses.id = course_user.course_id&lt;/span&gt;
&lt;span class="s"&gt;    where course_user.user_id = $1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just what we wanted! The code scans the result into a slice of
&lt;tt class="docutils literal"&gt;course&lt;/tt&gt; objects directly, without needing the row-by-row loop. &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;
accomplishes this feat by using reflection - it examines the underlying type
of the struct in the slice and maps DB columns to struct fields automatically.
It sometimes needs help, though; for example, our &lt;tt class="docutils literal"&gt;course&lt;/tt&gt; struct has to
be modified as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CreatedAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`db:&amp;quot;created_at&amp;quot;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Hashtags&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StringArray&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; won't map the database &lt;tt class="docutils literal"&gt;created_at&lt;/tt&gt; column to the &lt;tt class="docutils literal"&gt;CreatedAt&lt;/tt&gt;
field automatically, we have to provide an instruction to do so explicitly in
a field tag.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; requires an underlying &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; driver for the
actual DB interactions. In the example above, we've been using &lt;tt class="docutils literal"&gt;pq&lt;/tt&gt;, but
the stdlib driver of &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; can be used as well. Unfortunately, &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/jackc/pgx/issues/760"&gt;does
not support the native pgx driver&lt;/a&gt;.
However, a different package called &lt;a class="reference external" href="https://github.com/georgysavva/scany"&gt;scany&lt;/a&gt; does support both the native and the
stdlib drivers of &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt;. I wrote another version of this sample, using
&lt;tt class="docutils literal"&gt;scany&lt;/tt&gt;; I won't show this code here, since it's very similar to the &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;
example, but you can find it &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2021/go-postgresql/scany"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-sqlx-worth-it"&gt;
&lt;h2&gt;Is &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; worth it?&lt;/h2&gt;
&lt;p&gt;Looking at our &lt;tt class="docutils literal"&gt;dbAllCoursesForUser&lt;/tt&gt; function, the version using &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;
saves about 14 lines of code compared to the vanilla scan with &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt;.
I'm &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/to-orm-or-not-to-orm/"&gt;on record saying that ORMs are unlikely to be worthwhile in Go&lt;/a&gt;, but what about
&lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt;? Is saving 14 LOC per DB query function worth the trouble of an
additional dependency, with its potential quirks, bugs and leaky abstractions?&lt;/p&gt;
&lt;p&gt;This question is hard to answer globally, so I'll just say &amp;quot;it depends&amp;quot;.&lt;/p&gt;
&lt;p&gt;On one hand, 14 LOC per DB query is really not much. Say you have 50
possible SQL queries in your application, this saves 700 LOC of trivial and
repetitive code. Is that a lot? In most cases, almost certainly not. In the end,
it all boils down to the central thesis of the &lt;a class="reference external" href="https://eli.thegreenplace.net/2017/benefits-of-dependencies-in-software-projects-as-a-function-of-effort/"&gt;benefits of extra dependencies
as a function of effort&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, as opposed to ORMs, packages like &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;scany&lt;/tt&gt;
provide a fairly focused utility with not very much magic involved. After all,
the standard library already has similar tools built in for unmarshaling JSON,
so this is a tried-and-true method that can work for data in relational
databases as well. Since the utility of these packages is focused, they are
not terribly hard to tear out of a codebase and replace, in case things don't
go as expected, so they also present a considerably smaller risk than going
all-in on ORMs.&lt;/p&gt;
&lt;p&gt;To conclude, packages like &lt;tt class="docutils literal"&gt;sqlx&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;scany&lt;/tt&gt; provide a middle ground
between raw SQL access and full-blown ORMs; this means mid-of-the-way advantages
as well as disadvantages.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There's a small nuance to be aware of if you're following along with
the code samples, trying to run them. To be able to read PostgreSQL
arrays in Go using the &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; driver component of &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt;, we
still need to import &lt;tt class="docutils literal"&gt;pq&lt;/tt&gt; in order to use its &lt;tt class="docutils literal"&gt;pq.Array&lt;/tt&gt; type. This
type provides custom readers that are required to read custom DB types
via the standard interface. When using the &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; direct interface, this
is not necessary since &lt;tt class="docutils literal"&gt;pgx&lt;/tt&gt; supports reading PostgreSQL arrays
directly into slices. See &lt;a class="reference external" href="https://github.com/jackc/pgx/issues/72"&gt;this pgx issue&lt;/a&gt; for additional information.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As usual with benchmarks, YMMV. Every case is different, and I
imagine that in many scenarios the network overhead of a PostgreSQL
connection will subsume any difference observable between different
drivers.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Databases"></category></entry><entry><title>To ORM or not to ORM</title><link href="https://eli.thegreenplace.net/2019/to-orm-or-not-to-orm/" rel="alternate"></link><published>2019-05-07T06:47:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2019-05-07:/2019/to-orm-or-not-to-orm/</id><summary type="html">&lt;p&gt;I've been enjoying using Go's &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package for working with
databases. Recently, some mentions of &lt;a class="reference external" href="https://gorm.io/"&gt;gorm&lt;/a&gt; piqued my
curiosity about using ORMs in Go vs. using &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; directly. Having had
some mixed experiences with ORMs in the past, I decided to start with a
practical experiment by writing â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been enjoying using Go's &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package for working with
databases. Recently, some mentions of &lt;a class="reference external" href="https://gorm.io/"&gt;gorm&lt;/a&gt; piqued my
curiosity about using ORMs in Go vs. using &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; directly. Having had
some mixed experiences with ORMs in the past, I decided to start with a
practical experiment by writing the same simple application with and without
gorm, and comparing the results in terms of effort spent.&lt;/p&gt;
&lt;p&gt;This led me to write down some general thoughts on the benefits and drawbacks
of ORMs. If that kind of thing interests you, read on!&lt;/p&gt;
&lt;div class="section" id="my-no-orm-vs-orm-experiment"&gt;
&lt;h2&gt;My no-ORM vs. ORM experiment&lt;/h2&gt;
&lt;p&gt;My experiment involves defining a simple database that could be a subset of
a blogging engine, as well as write some Go code that populates and queries this
database and compare how it looks using plain SQL vs. using an ORM.&lt;/p&gt;
&lt;p&gt;This is the database schema:&lt;/p&gt;
&lt;img alt="DB schema for the experiment - showing Post, Tag, Comment tables" class="align-center" src="https://eli.thegreenplace.net/images/2019/ormdbschema.png" /&gt;
&lt;p&gt;While simple, this schema demonstrates an idiomatic normalized database that
most likely contains all the elements one needs to build simple wiki or blog
apps - it has both one-to-many relationships (between posts and comments) and
many-to-many relationships (between posts and tags). If you prefer to read DB
schemas as SQL, here's the definition taken &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2019/orm-vs-no-orm/sql"&gt;from the code sample&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Comment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;commentID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- One-to-many relationship between Post and Comment; each Comment&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- references a Post it&amp;#39;s logically attached to.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;foreign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tagID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;unique&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;-- Linking table for the many-to-many relationship between Tag and Post&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PostTag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tagID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;foreign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;foreign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tagID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tagID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This SQL was tested with SQLIte; other RDBMSs may need minor adjustments. When
using gorm, there is no need to write this SQL. Instead, we define &amp;quot;objects&amp;quot;
(really &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt;s) with some magic field tags for gorm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Comments&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Comment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`gorm:&amp;quot;foreignkey:PostID&amp;quot;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Tags&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;`gorm:&amp;quot;many2many:post_tags;&amp;quot;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`gorm:&amp;quot;many2many:post_tags;&amp;quot;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Comment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Author&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;PostID&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2019/orm-vs-no-orm"&gt;The code&lt;/a&gt;
working with this database comes in two variants:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No-ORM; using plain SQL queries through the &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package.&lt;/li&gt;
&lt;li&gt;ORM; using the gorm library for database access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sample is doing several things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add some data (posts, comments, tags) to the DB.&lt;/li&gt;
&lt;li&gt;Query all posts in a given tag.&lt;/li&gt;
&lt;li&gt;Query all post details (all comments attached to it, all tags it's marked
with).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just as an example, here are the two variants for task (2) - finding all posts
in a given tag (this could be to populate some sort of archives listing page
on the blog). First, no-ORM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dbAllPostsInTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;    select Post.postID, Post.published, Post.title, Post.content&lt;/span&gt;
&lt;span class="s"&gt;    from Post&lt;/span&gt;
&lt;span class="s"&gt;    inner join PostTag on Post.postID = PostTag.postID&lt;/span&gt;
&lt;span class="s"&gt;    where PostTag.tagID = ?`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is fairly straightforward if you know SQL. We have to perform an
&lt;em&gt;inner join&lt;/em&gt; between &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PostTag&lt;/tt&gt; and filter it by the tag ID. The
rest of the code is just iterating over the results.&lt;/p&gt;
&lt;p&gt;Next, the ORM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;allPostsInTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Posts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the ORM code, we tend to use objects directly (&lt;tt class="docutils literal"&gt;Tag&lt;/tt&gt; here) rather than
their IDs, for the same effect. The SQL query generated by gorm here will be
pretty much the same as the one I wrote manually in the no-ORM variant.&lt;/p&gt;
&lt;p&gt;Apart from generating the SQL for us, gorm also provides an easier way to
populate a slice of results. In the code using &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; we explicitly
loop over the results, scanning each row separately into individual struct
fields. gorm's &lt;tt class="docutils literal"&gt;Related&lt;/tt&gt; method (and other similar querying methods) will
populate structs automatically and will also scan the whole result set in one
go.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2019/orm-vs-no-orm"&gt;play with the code&lt;/a&gt;! I
was pleasantly surprised at the amount of code gorm saves here (about 50%
savings for the DB-intensive part of the code), and for these simple queries
using gorm wasn't hard - the invocations are taken from API docs in a
straightforward manner. The only complaint I have about my specific example is
that setting up the many-to-many relationship between &lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Tag&lt;/tt&gt; was a
bit finicky, and the gorm struct field tags look ugly and magical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="layered-complexity-rears-its-ugly-head"&gt;
&lt;h2&gt;Layered complexity rears its ugly head&lt;/h2&gt;
&lt;p&gt;The problem with simple experiments like that above is that it's often difficult
to tickle the system's boundaries. It obviously works well for simple cases, but
I was interested to find out what happens when it's pushed to the limit - how
does it handle complicated queries and DB schemas? So I turned to browsing
Stack Overflow. There are many gorm-related questions, and sure enough, the
usual layered complexity problem is immediately apparent (&lt;a class="reference external" href="https://stackoverflow.com/questions/55914830/value-0-zero-not-getting-updated-in-postgres-database-when-updation-is-perfo"&gt;example 1&lt;/a&gt;,
&lt;a class="reference external" href="https://stackoverflow.com/questions/55656002/how-to-select-by-fields-in-preloaded-object"&gt;example 2&lt;/a&gt;).
Let me explain what I mean by that.&lt;/p&gt;
&lt;p&gt;Any situation where complex functionality is wrapped in another layer runs the
risk of increasing the overall complexity when the wrapping layer is itself
complicated. This often comes along with leaky abstractions - wherein the
wrapping layer can't do a perfect job wrapping the underlying functionality, and
forces programmers to fight with both layers simultaneously.&lt;/p&gt;
&lt;p&gt;Unfortunately, gorm is very susceptible to this problem. Stack Overflow has
an endless supply of problems where users end up fighting complexities imposed
by gorm itself, working around its limitations, and so on. Few things are
as aggravating as knowing exactly what you want (i.e. which SQL query you want
it to issue) but not being able to concoct the right sequence of gorm calls
to end up with that query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pros-and-cons-of-using-an-orm"&gt;
&lt;h2&gt;Pros and Cons of using an ORM&lt;/h2&gt;
&lt;p&gt;One key advantage of using an ORM is apparent from my experiment: it saves quite
a bit of tedious coding. About 50% savings in DB-centered code is nontrivial
and can make a real difference for some applications.&lt;/p&gt;
&lt;p&gt;Another advantage that wasn't obvious here is abstraction from different
database backends. This may be less of an issue in Go, however, since
&lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; already provides a great portable layer. In languages that
lack a standardized SQL access layer, this advantage is much stronger.&lt;/p&gt;
&lt;p&gt;As for the disadvantages:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Another layer to learn, with all the idiosyncracies, special syntax, magical
tags, and so on. This is mainly a disadvantage if you're already experienced
with SQL itself.&lt;/li&gt;
&lt;li&gt;Even if you're not experienced with SQL, there is a vast bank of knowledge
out there and many folks who can help with answers. Any single ORM is much
more obscure knowledge not shared by many, and you will spend considerable
amounts of time figuring out how to force-feed it things.&lt;/li&gt;
&lt;li&gt;Debugging query performance is challenging, because we're abstracted
one level further from &amp;quot;the metal&amp;quot;. Sometimes quite a bit of tweaking is
required to get the ORM to generate the right queries for you, and this is
frustrating when you already know which queries you need.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, a disadvantage that only becomes apparent in the long term: while SQL
stays pretty much constant over the years, ORMs are language-specific and also
tend to appear and disappear all the time. Every popular language has a large
variety of ORMs to choose from; as you move from one team/company/project to
another, you may be expected to switch, and that's additional mental burden. Or
you may switch languages altogether. SQL is a much more stable layer that stays
with you across teams/languages/projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Having implemented a simple application skeleton using raw SQL and compared it
to an implementation using gorm, I can see the appeal of ORMs in reducing
boilerplate. I can also remember myself from many years ago being a DB newbie
and using Django with its ORM to implement an application - it was nice! I
didn't have to think about SQL or the underlying DB much, it just worked. But
that use case was really simple.&lt;/p&gt;
&lt;p&gt;With my &amp;quot;experienced and salty&amp;quot; hat on, I can also see many disadvantages in
using an ORM. Specifically, I don't think an ORM is
useful &lt;em&gt;for me&lt;/em&gt; in a language like Go which already has a good SQL interface
that's mostly portable across DB backends. I'd much rather spend an extra bit
of time typing, but this will save me time reading ORM's documentation,
optimizing my queries, and most importantly debugging.&lt;/p&gt;
&lt;p&gt;I could see an ORM still being useful in Go if your job is to write large
numbers of simple CRUD-like applications, where the savings in typing overcome
the disadvantages. In the end, it all boils
down to the central thesis of the &lt;a class="reference external" href="https://eli.thegreenplace.net/2017/benefits-of-dependencies-in-software-projects-as-a-function-of-effort/"&gt;benefits of extra dependencies as a function
of effort&lt;/a&gt;:
where there is significant effort to spend on a project &lt;em&gt;outside&lt;/em&gt; the
DB-interfacing code - which should be the case for programs that aren't simple
CRUDs - the ORM dependency is not worth it, in my opinion.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Databases"></category><category term="Programming"></category><category term="Go"></category></entry><entry><title>SQL inner and outer joins</title><link href="https://eli.thegreenplace.net/2019/sql-inner-and-outer-joins/" rel="alternate"></link><published>2019-04-09T05:28:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2019-04-09:/2019/sql-inner-and-outer-joins/</id><summary type="html">&lt;p&gt;If you store data in a relational database, it's good practice to have the data
&lt;em&gt;normalized&lt;/em&gt;. This typically requires splitting data to multiple tables that
are logically connected through keys. As a result, most non-trivial queries
require joins on multiple tables to gather all the interesting columns. This
post is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you store data in a relational database, it's good practice to have the data
&lt;em&gt;normalized&lt;/em&gt;. This typically requires splitting data to multiple tables that
are logically connected through keys. As a result, most non-trivial queries
require joins on multiple tables to gather all the interesting columns. This
post is a brief tour of SQL joins, focusing on the differences between &lt;em&gt;inner&lt;/em&gt;
and &lt;em&gt;outer&lt;/em&gt; joins.&lt;/p&gt;
&lt;div class="section" id="cross-join"&gt;
&lt;h2&gt;Cross join&lt;/h2&gt;
&lt;p&gt;To understand SQL joins, it's best to start with &lt;em&gt;cross&lt;/em&gt; joins, because they
are the simplest combination of tables supported by SQL. A cross join occurs
when we write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Throughout this post, we'll be working with two sample tables called &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    t1                         t2

 id |   name              code | id
----+----------          ------+----
  1 | Joanne              x    |  2
  2 | Sam                 z    |  3
  3 | Emmanuel            a    |  7
  4 | Brayden
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The SQL code to create these tables and run all the examples in this post is
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2019/joins"&gt;available here&lt;/a&gt;. All the code
was tested on PostgreSQL 9.5.&lt;/p&gt;
&lt;p&gt;Running the cross join on these tables results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code | id
----+----------+------+----
  1 | Joanne   | x    |  2
  2 | Sam      | x    |  2
  3 | Emmanuel | x    |  2
  4 | Brayden  | x    |  2
  1 | Joanne   | z    |  3
  2 | Sam      | z    |  3
  3 | Emmanuel | z    |  3
  4 | Brayden  | z    |  3
  1 | Joanne   | a    |  7
  2 | Sam      | a    |  7
  3 | Emmanuel | a    |  7
  4 | Brayden  | a    |  7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The cross join performs a cross product (or &lt;em&gt;Cartesian&lt;/em&gt; product) between the two
tables. For each row in &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt;, it adds all possible rows from  &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;. The
resulting table has all the columns of &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; and of &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;, and its number of
rows is the product of numbers of rows in &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I find cross joins to be a good starting point because they make inner joins
much easier to understand. They are also the basis of joins in relational
algebra.&lt;/p&gt;
&lt;p&gt;SQL also supports a more explicit way to invoke a cross join:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;cross&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is equivalent to the first statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inner-join"&gt;
&lt;h2&gt;Inner join&lt;/h2&gt;
&lt;p&gt;An important component of SQL queries is filtering results with a &lt;tt class="docutils literal"&gt;where&lt;/tt&gt;
clause. For example, we can create the following (slightly nonsensical) filter
on the cross join shown earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%d%&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code | id
----+----------+------+----
  4 | Brayden  | x    |  2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One filter that's particularly useful when crossing two tables is checking
whether there's a match on some column value. Both &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt; have an
&lt;tt class="docutils literal"&gt;id&lt;/tt&gt; column; let's assume these IDs refer to the same thing, and that we want
to find all combinations of rows from the two tables where the IDs match. We can
do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code | id
----+----------+------+----
  2 | Sam      | x    |  2
  3 | Emmanuel | z    |  3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This kind of filtering is so useful that it has its own concept: the &lt;em&gt;inner
join&lt;/em&gt; &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It produces the exact same result table. When the names of the columns we
compare are the same in the two tables, there's an even shorter syntax that can
be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of this will only have a single &lt;tt class="docutils literal"&gt;id&lt;/tt&gt; column, since we're making it
explicit that &lt;tt class="docutils literal"&gt;id&lt;/tt&gt;s match between the tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code
----+----------+------
  2 | Sam      | x
  3 | Emmanuel | z
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I find the filtering equivalence very useful to understand inner joins. Just
remember that it's a cross product of the two tables where only rows that
satisfy a certain condition are returned. You may be wondering what's the
difference between using &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; filtering and &lt;tt class="docutils literal"&gt;inner join ... on&lt;/tt&gt;. While
the two are logically equivalent, some things to keep in mind:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;At least theoretically, &lt;tt class="docutils literal"&gt;inner join ... on&lt;/tt&gt; is more efficient because in
multi-table joins (which is common) we get to apply the filtering per join and
not at the end on one huge table. With modern SQL query optimizers it's not
clear whether this is a real advantage, however. It's quite likely that the
optimizer will generate exactly the same sequence of low-level operations for
the two.&lt;/li&gt;
&lt;li&gt;In terms of readability, it's much nicer to be able to see what the join is
&lt;em&gt;on&lt;/em&gt; close to the join itself, rather than in the end of the query in one
large &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; filter. This can be significant for multi-table joins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example, consider customers making orders, with order details in a
separate table (since customers could have multiple orders). We could have a
complex join done as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customerid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orderid&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customerid&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order_details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orderid&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the latter it's much clearer what the criteria for each join is.&lt;/p&gt;
&lt;p&gt;Finally, I'll mention that some databases support the &lt;em&gt;natural join&lt;/em&gt;, which
is a shortcut for &amp;quot;inner join tables on the columns that have the same name&amp;quot;.
The following query is equivalent to the variant with &lt;tt class="docutils literal"&gt;using&lt;/tt&gt; shown above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;natural&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Natural join is a term from relational algebra, and it's not commonly used in
SQL queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outer-join"&gt;
&lt;h2&gt;Outer join&lt;/h2&gt;
&lt;p&gt;While the inner join is simple to understand as a special case of the cross
product, outer join is a bit trickier. Luckily, it's not hard to grok outer
joins once you undererstand inner joins, so we can build this knowledge step by
step.&lt;/p&gt;
&lt;p&gt;Let's get back to our tables &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;. We could assign a logical
meaning to the inner join &lt;tt class="docutils literal"&gt;using (id)&lt;/tt&gt; as &amp;quot;show me all the codes (from &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;)
matching names (from &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt;)&amp;quot;. The result is two rows where a match on &lt;tt class="docutils literal"&gt;id&lt;/tt&gt;
was found in the two tables. However, sometimes we want something slightly
different; we want to ask &amp;quot;show me all the names (from &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt;) and all the
codes (from &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;) that match them, if any&amp;quot;. In other words, we want all the
names to be in the results, perhaps with null values for code where no match
was found in the &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt; table &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's break this request to pieces. We want:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All names from &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; that have a match in &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;, with the code from &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;All names from &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; that have no match in &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt;, with null for the code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In SQL we can express this as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first query is precisely our inner join from the previous section, and
it's answering the first piece.&lt;/li&gt;
&lt;li&gt;The second query lists all the names that don't have a match in &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt; using
a subquery.&lt;/li&gt;
&lt;li&gt;We're listing the column names explicitly here because column names must match
exactly for the two tables being &lt;tt class="docutils literal"&gt;union&lt;/tt&gt;-ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we just wrote is called a &lt;em&gt;left outer join&lt;/em&gt; in SQL &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;, and can be more
easily written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;outer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code
----+----------+------
  2 | Sam      | x
  3 | Emmanuel | z
  4 | Brayden  |
  1 | Joanne   |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the &lt;em&gt;left&lt;/em&gt; outer join because we want all the rows from the &lt;em&gt;left-hand
side&lt;/em&gt; table to appear in the result. As you may have guessed, there's also
a &lt;em&gt;right&lt;/em&gt; outer join:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;outer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code
----+----------+------
  2 | Sam      | x
  3 | Emmanuel | z
  7 |          | a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here all the rows from the &lt;em&gt;right-hand side&lt;/em&gt; table appear in the result, with
a matching column (&lt;tt class="docutils literal"&gt;name&lt;/tt&gt;) from the &lt;em&gt;left-hand side&lt;/em&gt; if found, null otherwise.&lt;/p&gt;
&lt;p&gt;Finally, we may want rows from &lt;em&gt;both&lt;/em&gt; sides of the join to always appear in the
result table. That's called a &lt;em&gt;full&lt;/em&gt; outer join:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;full&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;outer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | code
----+----------+------
  2 | Sam      | x
  3 | Emmanuel | z
  7 |          | a
  4 | Brayden  |
  1 | Joanne   |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A full outer join is straightforward to express using a union of left and right
joins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's a slight caveat, though. While &lt;tt class="docutils literal"&gt;union&lt;/tt&gt; removes duplicates, &lt;tt class="docutils literal"&gt;full
outer join&lt;/tt&gt; does not; therefore, the results can be different in some special
cases. In the event that you care about seeing duplicates in the output and
the database doesn't support a &lt;tt class="docutils literal"&gt;full outer join&lt;/tt&gt;, this is a more accurate
(though less efficient) translation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="joins-on-multiple-columns"&gt;
&lt;h2&gt;Joins on multiple columns&lt;/h2&gt;
&lt;p&gt;The examples so far showed joins on a single shared column - &lt;tt class="docutils literal"&gt;id&lt;/tt&gt;. While this
is the most common case, sometimes more complex matching criteria are used.
SQL doesn't restrict the syntax of &lt;tt class="docutils literal"&gt;join&lt;/tt&gt; to a single condition, so we can
join on multiple columns and arbitrary conditions. Let's add another column to
our two tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        t1                             t2

 id |   name   | ranking        code | id | ranking
----+----------+---------      ------+----+--------
  1 | Joanne   |       7        x    |  2 |       8
  2 | Sam      |       7        z    |  3 |       6
  3 | Emmanuel |       6
  4 | Brayden  |       2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can run joins on both &lt;tt class="docutils literal"&gt;id&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ranking&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ranking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ranking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id |   name   | ranking | code | id | ranking
----+----------+---------+------+----+---------
  3 | Emmanuel |       6 | z    |  3 |       6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with &lt;tt class="docutils literal"&gt;using&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ranking&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id | ranking |   name   | code
----+---------+----------+------
  3 |       6 | Emmanuel | z
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, we can run &lt;tt class="docutils literal"&gt;outer&lt;/tt&gt; joins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;outer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ranking&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; id | ranking |   name   | code
----+---------+----------+------
  3 |       6 | Emmanuel | z
  2 |       7 | Sam      |
  4 |       2 | Brayden  |
  1 |       7 | Joanne   |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="joins-on-multiple-tables"&gt;
&lt;h2&gt;Joins on multiple tables&lt;/h2&gt;
&lt;p&gt;In real-life databases, data is often split to multiple tables; it's not
uncommon for queries to probe 4-5 or more tables to gather all the interesting
information. Let's use three table for an example. We'll have a table of
customers and a table of items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         customers                       items

 customerid |   name          itemid | description | price
------------+----------      --------+-------------+-------
          1 | Robert               1 | Napkins     |   1.5
          2 | Jennifer             2 | Granola     |  4.25
          3 | Yoshi                3 | Cheese      |     3
          4 | Xi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition we'll have a &lt;em&gt;linking&lt;/em&gt; table to record orders made by customers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; customerid | itemid | orderdate
------------+--------+------------
          1 |      2 | 2019-03-02
          1 |      3 | 2019-03-02
          1 |      1 | 2019-03-03
          2 |      1 | 2019-02-22
          3 |      3 | 2019-01-15
          3 |      2 | 2019-02-20
          4 |      3 | 2019-02-21
          4 |      3 | 2019-02-22
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We may be interested in all the customers who ordered cheese, and the date of
the order. This requires joining all three tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orderdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cheese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  name  | orderdate  | description
--------+------------+-------------
 Robert | 2019-03-02 | Cheese
 Yoshi  | 2019-01-15 | Cheese
 Xi     | 2019-02-21 | Cheese
 Xi     | 2019-02-22 | Cheese
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the parens around the first join. This is not strictly necessary for this
query, but I find it useful to control the order of joining explicitly. We can
join as many tables as we want, but the order has to make sense. Each join
produces a new logical table that participates in other joins, and for some
queries the order of joins is important.&lt;/p&gt;
&lt;p&gt;While it will be more common to see sequences of &lt;tt class="docutils literal"&gt;inner&lt;/tt&gt; joins in such
queries, it's also possible to mix and match with &lt;tt class="docutils literal"&gt;outer&lt;/tt&gt; joins; whatever
makes sense.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;When we use the &lt;tt class="docutils literal"&gt;join&lt;/tt&gt; keyword in SQL, &lt;em&gt;inner&lt;/em&gt; join is the default,
so the keyword &lt;tt class="docutils literal"&gt;inner&lt;/tt&gt; is optional. That said, to distinguish inner
joins from outer joins IMHO it's preferable to be explicit.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This sounds contrived with our simplistic tables, but in reality it's an
extremely common database query. Imagine our &lt;tt class="docutils literal"&gt;t1&lt;/tt&gt; is customers with
unique IDs and names, and our &lt;tt class="docutils literal"&gt;t2&lt;/tt&gt; is some code assigned to each
customer. Suppose we want to display all our customers, regardless of who
already has a code assigned. For customers that do have a code we want to
show it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;With the keyword &lt;tt class="docutils literal"&gt;left&lt;/tt&gt; before a &lt;tt class="docutils literal"&gt;join&lt;/tt&gt;, the keyword &lt;tt class="docutils literal"&gt;outer&lt;/tt&gt; is
optional, so we could just say &lt;tt class="docutils literal"&gt;left join&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;left outer
join&lt;/tt&gt;. I like the explicitness of having &lt;tt class="docutils literal"&gt;outer&lt;/tt&gt; there. The same
applies for &lt;tt class="docutils literal"&gt;right&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;full&lt;/tt&gt; joins.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Databases"></category></entry><entry><title>Design patterns in Go's database/sql package</title><link href="https://eli.thegreenplace.net/2019/design-patterns-in-gos-databasesql-package/" rel="alternate"></link><published>2019-03-27T06:25:00-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2019-03-27:/2019/design-patterns-in-gos-databasesql-package/</id><summary type="html">&lt;p&gt;Using SQL databases from Go is easy, in three steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Step 1: import the main SQL package&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2: import a driver package to use a specific SQL database&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3: open a database using a registered driver name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Using SQL databases from Go is easy, in three steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Step 1: import the main SQL package&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2: import a driver package to use a specific SQL database&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3: open a database using a registered driver name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this point on, the &lt;tt class="docutils literal"&gt;db&lt;/tt&gt; object can be used to query and modify the
database, with the same code suitable for all the supported SQL databases. If we
want to change our database from SQLite to PostgreSQL, it's very likely that we
only need to import a different driver and provide a different name in the call
to &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; &lt;a class="footnote-reference" href="#sql1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I want to briefly examine some of the design patterns and
architecture behind &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; that makes this all possible.&lt;/p&gt;
&lt;div class="section" id="the-main-design-pattern"&gt;
&lt;h2&gt;The main design pattern&lt;/h2&gt;
&lt;p&gt;The architecture of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; is governed by one overarching design
pattern. I was trying to figure out which of the classical design patterns it
resembles most, and the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy Pattern&lt;/a&gt; seems the closest, though
it's not quite that. Let me know if you can think of a closer correspondence
&lt;a class="footnote-reference" href="#sql2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It goes like this: we have a common interface we want to present to users,
with an implementation that's specific to every DB backend. Obviously, this
sounds like a classic interface + implementation, which Go is particularly good
at with its robust support for interfaces.&lt;/p&gt;
&lt;p&gt;So the first idea would be: create some &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface which the user
interacts with, and each backend implements this interface. Sounds simple,
right?&lt;/p&gt;
&lt;p&gt;Sure, but there are some issues with this approach. Remember that Go recommends
interfaces to be small, with just a handful of methods to implement. Here we'd
need a much larger &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface, and this leads to problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adding user-facing capabilities is difficult because they may require
adding methods to the interface. This breaks all the interface
implementations and requires multiple standalone projects to update their
code.&lt;/li&gt;
&lt;li&gt;Encapsulating functionality that is common to all database backends is
difficult, because there is no natural place to add it if the user interacts
directly with the &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; interface. It has to be implemented separately for
each backend, which is wasteful and logistically complicated.&lt;/li&gt;
&lt;li&gt;If backends want to add optional capabilities, this is challenging with
a single interface without resorting to type-casts for specific backends.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, a better idea seems to be: split up the user-facing type and
functionality from the common backend interface. Graphically, it looks like
this:&lt;/p&gt;
&lt;img alt="SQL DB and driver interface diagram" class="align-center" src="https://eli.thegreenplace.net/images/2019/database_sql_diagram.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; is a user-facing type. It's not an interface, but a &lt;em&gt;concrete&lt;/em&gt; type (a
struct) implemented in &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; itself. It is backend-independent and
encapsulates a lot of functionality that is common to all backends, like
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Connection_pool"&gt;connection pooling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do backend-specific work (such as issue SQL queries to the actual database),
&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; uses an interface called &lt;tt class="docutils literal"&gt;database/sql/driver.Driver&lt;/tt&gt; (and several
other interfaces that define connections, transactions, etc). This interface
is lower-level, and it's implemented by each database backend. In the diagram
above we can see implementations from the &lt;tt class="docutils literal"&gt;pq&lt;/tt&gt; package (for PostreSQL)
and from the &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt; package.&lt;/p&gt;
&lt;p&gt;This approach helps &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; elegantly address the problems mentioned
earlier:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adding user-facing capabilities doesn't necessarily require an interface
change now, as long as the capability can be implemented in the
backend-independent layer (&lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; and its sister types).&lt;/li&gt;
&lt;li&gt;Functionality that's common to all database backends now has a natural place
to be in. I've mentioned connection pooling, but there is a lot of other
stuff the backend-independent types in &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; add on top of the
backend-specific implementations. Another example: handling retries for bad
connection to the database server.&lt;/li&gt;
&lt;li&gt;If backends add optional capabilities, these can be selectively utilized in
the backend-independent layer without exposing them directly to the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="registering-drivers"&gt;
&lt;h2&gt;Registering drivers&lt;/h2&gt;
&lt;p&gt;Another interesting aspect of the design of &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; is how database
drivers register themselves with the main package. It's a nice example of
implementing &lt;em&gt;compile-time plugins&lt;/em&gt; in Go.&lt;/p&gt;
&lt;p&gt;As the code sample at the top of this post shows, &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; knows about
the imported drivers' names, and can open them by name with &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt;. How
does that work?&lt;/p&gt;
&lt;p&gt;The trick is in the blank import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While it doesn't actually import any names from the package, it does invoke its
&lt;tt class="docutils literal"&gt;init&lt;/tt&gt; function, which in case of &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;SQLiteDriver&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;sql.go&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Register&lt;/tt&gt; adds a mapping from a string name to an
implementation of the &lt;tt class="docutils literal"&gt;driver.Driver&lt;/tt&gt; interface; the mapping is in a global
map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RWMutex&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Register makes a database driver available by the provided name.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// If Register is called twice with the same name or if driver is nil,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// it panics.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driversMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sql: Register driver is nil&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sql: Register called twice for driver &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When &lt;tt class="docutils literal"&gt;sql.Open&lt;/tt&gt; is called, it looks up the name in the &lt;tt class="docutils literal"&gt;drivers&lt;/tt&gt; map and can
then instantiate a &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; object with the proper driver implementation attached.
You can also call the &lt;tt class="docutils literal"&gt;sql.Drivers&lt;/tt&gt; function at any time to get the names of
all the registered drivers.&lt;/p&gt;
&lt;p&gt;This approach implements a &lt;em&gt;compile-time&lt;/em&gt; plugin, because the &lt;tt class="docutils literal"&gt;import&lt;/tt&gt;s for
the included backends happen when the Go code is compiled. The binary has a
fixed set of database drivers built into it. Go also has support for &lt;em&gt;run-time&lt;/em&gt;
plugins, but that is a topic for a separate post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-types-with-the-scanner-interface"&gt;
&lt;h2&gt;Custom types with the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface&lt;/h2&gt;
&lt;p&gt;Another interesting architectural feature of the &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; package is
supporting storage and retrieval of custom types in the database. The
&lt;tt class="docutils literal"&gt;Rows.Scan&lt;/tt&gt; method is typically used to read columns from a row. It takes a
sequence of &lt;tt class="docutils literal"&gt;interface{}&lt;/tt&gt; to be generic, using a type switch underneath to
select the right reader depending on the type of an argument.&lt;/p&gt;
&lt;p&gt;For customization, &lt;tt class="docutils literal"&gt;Rows.Scan&lt;/tt&gt; supports types that implement the
&lt;tt class="docutils literal"&gt;sql.Scanner&lt;/tt&gt; interface, and then invokes their &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; method to perform
the actual data read.&lt;/p&gt;
&lt;p&gt;One built-in example is &lt;tt class="docutils literal"&gt;sql.NullString&lt;/tt&gt;. If we try to &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; a column into
a &lt;tt class="docutils literal"&gt;string&lt;/tt&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and that column has a &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt; value, we'll get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sql: Scan error on column index 1, name &amp;quot;username&amp;quot;:
    unsupported Scan, storing driver.Value type &amp;lt;nil&amp;gt; into type *string
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can avoid this by using a &lt;tt class="docutils literal"&gt;sql.NullString&lt;/tt&gt; instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NullString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;tt class="docutils literal"&gt;username&lt;/tt&gt; will have its &lt;tt class="docutils literal"&gt;Valid&lt;/tt&gt; field set to &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; for a &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;
column. This works because &lt;tt class="docutils literal"&gt;NullString&lt;/tt&gt; implements the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface.&lt;/p&gt;
&lt;p&gt;A more interesting example involves types that are specific to certain database
backends. For example, while PostgrSQL supports &lt;a class="reference external" href="https://www.postgresql.org/docs/9.1/arrays.html"&gt;array types&lt;/a&gt;, some other databases (like
SQLite) do not. So &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; cannot support array types natively, but
features like the &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; interface make it possible for user code to
interact with such data fairly easily anyway.&lt;/p&gt;
&lt;p&gt;To extend the previous example, suppose our rows also have a list of activities
(as strings) for each user &lt;a class="footnote-reference" href="#sql3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. Then the &lt;tt class="docutils literal"&gt;Scan&lt;/tt&gt; would go like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NullString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;activities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pq.Array&lt;/tt&gt; function is provided by the &lt;a class="reference external" href="https://godoc.org/github.com/lib/pq"&gt;pq PostgreSQL binding&lt;/a&gt;. It takes a slice and converts it to an
anonymous type that implements the &lt;tt class="docutils literal"&gt;sql.Scanner&lt;/tt&gt; interface.&lt;/p&gt;
&lt;p&gt;This is a nice way to &lt;em&gt;escape the abstraction&lt;/em&gt; when necessary. Even though it's
great to have a uniform interface to access many kinds of databases, sometimes
we really do want to use a specific DB with its specific features. It would be
a shame to give up &lt;tt class="docutils literal"&gt;database/sql&lt;/tt&gt; in this case, and we don't have to - because
of these features that let specific database backends provide custom behavior.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="sql1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Assuming we only use standard SQL syntax in our queries that both
databases support, of course.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="sql2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I first encountered an explicit discussion of this pattern in the
&lt;a class="reference external" href="https://github.com/google/go-cloud"&gt;Go CDK project&lt;/a&gt;, which I recently
joined. The Go CDK uses a similar approach for its portable
types, and its &lt;a class="reference external" href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#portable-types-and-drivers"&gt;design documentation&lt;/a&gt;
calls it the &lt;em&gt;portable type and driver pattern&lt;/em&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="sql3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I realize that multi-valued fields are not good relational design. This
is just an example.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Databases"></category><category term="Plugins"></category></entry><entry><title>Zipped dump of a SQLite database with Python</title><link href="https://eli.thegreenplace.net/2010/03/05/zipped-dump-of-a-sqlite-database-with-python" rel="alternate"></link><published>2010-03-05T12:59:18-08:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2010-03-05:/2010/03/05/zipped-dump-of-a-sqlite-database-with-python</id><summary type="html">
        &lt;p&gt;Suppose you manage some data in a SQLite DB within a Python application. How can you dump the DB into a SQL dump file? Better yet, how can you directly create a zipped dump file (dumps tend to be big, and since they're SQL code, can be compressed very nicely â€¦&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;Suppose you manage some data in a SQLite DB within a Python application. How can you dump the DB into a SQL dump file? Better yet, how can you directly create a zipped dump file (dumps tend to be big, and since they're SQL code, can be compressed very nicely).&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00007f"&gt;sqlite3&lt;/span&gt;, &lt;span style="color: #00007f"&gt;sys&lt;/span&gt;, &lt;span style="color: #00007f"&gt;zipfile&lt;/span&gt;

dbname = sys.argv[&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;] &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #00007f"&gt;len&lt;/span&gt;(sys.argv) &amp;gt; &lt;span style="color: #007f7f"&gt;1&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #7f007f"&gt;&amp;#39;testdb.db&amp;#39;&lt;/span&gt;

&lt;span style="color: #007f00"&gt;# Open the db and dump all its data into the &amp;#39;data&amp;#39; buffer&lt;/span&gt;
con = sqlite3.connect(dbname)
data = &lt;span style="color: #7f007f"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;.join(con.iterdump())
con.close()

&lt;span style="color: #007f00"&gt;# Create a zip file and write add the dump into it as&lt;/span&gt;
&lt;span style="color: #007f00"&gt;# a new file&lt;/span&gt;
zf = zipfile.ZipFile(&lt;span style="color: #7f007f"&gt;&amp;#39;dump.zip&amp;#39;&lt;/span&gt;,
                     mode=&lt;span style="color: #7f007f"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;,
                     compression=zipfile.ZIP_DEFLATED)
zf.writestr(&lt;span style="color: #7f007f"&gt;&amp;#39;dump.sql&amp;#39;&lt;/span&gt;, data)
zf.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will work with Python 2.6 and later, since the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;iterdump&lt;/span&gt;&lt;/tt&gt; method of &lt;cite&gt;sqlite3&lt;/cite&gt; is only available since that version.&lt;/p&gt;
&lt;p&gt;Note that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.zip&lt;/span&gt;&lt;/tt&gt; file is created on the fly from a buffer, without a real &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dump.sql&lt;/span&gt;&lt;/tt&gt; file being created on the disk.&lt;/p&gt;

    </content><category term="misc"></category><category term="Databases"></category><category term="Python"></category></entry><entry><title>Compiling SQLite on Windows</title><link href="https://eli.thegreenplace.net/2009/09/23/compiling-sqlite-on-windows" rel="alternate"></link><published>2009-09-23T05:34:40-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2009-09-23:/2009/09/23/compiling-sqlite-on-windows</id><summary type="html">
        &lt;p&gt;Here's a short guide to compiling SQLite on Windows using Visual C++ Express 2005 and using the compiled DLL in a simple C program.&lt;/p&gt;
&lt;div class="section" id="download-the-files"&gt;
&lt;h3&gt;Download the files&lt;/h3&gt;
&lt;p&gt;First of all, &lt;a class="reference external" href="http://www.sqlite.org/download.html"&gt;download the latest&lt;/a&gt; SQLite. This guide refers to the currently modern version - 3.6.18, but other versions should also â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
        &lt;p&gt;Here's a short guide to compiling SQLite on Windows using Visual C++ Express 2005 and using the compiled DLL in a simple C program.&lt;/p&gt;
&lt;div class="section" id="download-the-files"&gt;
&lt;h3&gt;Download the files&lt;/h3&gt;
&lt;p&gt;First of all, &lt;a class="reference external" href="http://www.sqlite.org/download.html"&gt;download the latest&lt;/a&gt; SQLite. This guide refers to the currently modern version - 3.6.18, but other versions should also work with just minor modifications.&lt;/p&gt;
&lt;p&gt;You'll need the &amp;quot;&lt;a class="reference external" href="http://www.sqlite.org/amalgamation.html"&gt;amalgamation&lt;/a&gt;&amp;quot; archive and the precompiled Windows DLL archive (for the .def file). The amalgamation can be used to statically link SQLite with your code (by just throwing in the single .h and .c files into your project), but here we'll use it to compile a DLL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-msvc-project"&gt;
&lt;h3&gt;Create a MSVC project&lt;/h3&gt;
&lt;p&gt;I'm using Microsoft Visual C++ 2005 Express edition, but this shouldn't be difficult to customize for older or newer versions.&lt;/p&gt;
&lt;p&gt;Open MSVC and create a new Win32 project. In the Application Wizard select DLL and tick &amp;quot;Empty project&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.h&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.c&lt;/span&gt;&lt;/tt&gt; from the amalgamation to the project.&lt;/li&gt;
&lt;li&gt;Copy the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.def&lt;/span&gt;&lt;/tt&gt; file from the source distribution into the project directory. Note that the .def file can be generated from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.dll&lt;/span&gt;&lt;/tt&gt; using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dumpbin&lt;/span&gt;&lt;/tt&gt; tool.&lt;/li&gt;
&lt;li&gt;In the project settings, add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;THREADSAFE&lt;/span&gt;&lt;/tt&gt; to the preprocessor definitions and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.def&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Linker&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Input&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Module&lt;/span&gt; &lt;span class="pre"&gt;definition&lt;/span&gt; &lt;span class="pre"&gt;file&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="compile"&gt;
&lt;h3&gt;Compile&lt;/h3&gt;
&lt;p&gt;Build the project. With the described setup, I got the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1&amp;gt;Linking...
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_database_name
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_database_name16
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_origin_name
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_origin_name16
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_table_name
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_column_table_name16
1&amp;gt;sqlite3.def : error LNK2001: unresolved external symbol sqlite3_table_column_metadata
1&amp;gt;D:\eli\sqlite\sqlite_msvc_build\sqlite3\Debug\sqlite3.lib : fatal error LNK1120: 7 unresolved externals
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After some digging in the code of SQLite, it appears that the following preprocessor definition has to be added in the project properties to make it compile cleanly: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SQLITE_ENABLE_COLUMN_METADATA&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;When it's added, the compilation succeeds. A &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.dll&lt;/span&gt;&lt;/tt&gt; file appears in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Debug&lt;/span&gt;&lt;/tt&gt; directory of the project (or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Release&lt;/span&gt;&lt;/tt&gt;, depending on the build configuration).&lt;/p&gt;
&lt;p&gt;MSVC automatically generated an import library for me (called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.lib&lt;/span&gt;&lt;/tt&gt;) which can be used for the convenience of &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/253b8k2c%28VS.80%29.aspx"&gt;implicit linking&lt;/a&gt; to SQLite. If it doesn't do it for you, open the MSVC console, go to the directory where the .def file resides, and run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lib&lt;/span&gt; &lt;span class="pre"&gt;/def:sqlite.def&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-c-api"&gt;
&lt;h3&gt;Using the C API&lt;/h3&gt;
&lt;p&gt;Now let's set up a simple example usage of the SQLite C API. Here's a source file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span style="color: #007f00"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#include &amp;quot;sqlite3.h&amp;quot;&lt;/span&gt;


&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; &lt;span style="color: #00007f"&gt;main&lt;/span&gt;(&lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; argc, &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt; **argv)
{
    sqlite3* db;
    &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* zErr;
    &lt;span style="color: #00007f; font-weight: bold"&gt;int&lt;/span&gt; rc;
    &lt;span style="color: #00007f; font-weight: bold"&gt;char&lt;/span&gt;* sql;

    rc = sqlite3_open(&lt;span style="color: #7f007f"&gt;&amp;quot;test.db&amp;quot;&lt;/span&gt;, &amp;amp;db);

    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (rc)
    {
        fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;Can&amp;#39;t open database: %s\n&amp;quot;&lt;/span&gt;, sqlite3_errmsg(db));
        sqlite3_close(db);
        exit(&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;);
    }

    sql = &lt;span style="color: #7f007f"&gt;&amp;quot;create table episodes( id integer primary key,&amp;quot;&lt;/span&gt;
          &lt;span style="color: #7f007f"&gt;&amp;quot;                       name text, cid int)&amp;quot;&lt;/span&gt;;

    rc = sqlite3_exec(db, sql, &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;, &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;, &amp;amp;zErr);

    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (rc != SQLITE_OK)
    {
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (zErr != &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;)
        {
            fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;SQL error: %s\n&amp;quot;&lt;/span&gt;, zErr);
            sqlite3_free(zErr);
        }
    }

    sql = &lt;span style="color: #7f007f"&gt;&amp;quot;insert into episodes (name,id) values (&amp;#39;Cinnamon Babka2&amp;#39;,1)&amp;quot;&lt;/span&gt;;
    rc = sqlite3_exec(db, sql, &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;, &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;, &amp;amp;zErr);

    &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (rc != SQLITE_OK)
    {
        &lt;span style="color: #00007f; font-weight: bold"&gt;if&lt;/span&gt; (zErr != &lt;span style="color: #00007f"&gt;NULL&lt;/span&gt;)
        {
            fprintf(stderr, &lt;span style="color: #7f007f"&gt;&amp;quot;SQL error: %s\n&amp;quot;&lt;/span&gt;, zErr);
            sqlite3_free(zErr);
        }
    }

    sqlite3_close(db);
    &lt;span style="color: #00007f; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #007f7f"&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this does is create a simple database with a table and insers one entry into the table. This code comes from the samples for the &amp;quot;Definitive guide to SQLite&amp;quot; book.&lt;/p&gt;
&lt;p&gt;To compile, create a new MSVC project and add this file. In the &amp;quot;additional include directories&amp;quot; point to the amalgamation that contains the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sqlite3.h&lt;/span&gt;&lt;/tt&gt; header. Also, in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Linker&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Input&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Additional&lt;/span&gt; &lt;span class="pre"&gt;dependencies&lt;/span&gt;&lt;/tt&gt; point to the .lib file created in the previous section. This is used to implicitly link the SQLite API calls.&lt;/p&gt;
&lt;p&gt;The project should build without problems. To run it, make sure the DLL you created is in the same directory with the new .exe file.&lt;/p&gt;
&lt;p&gt;After running the sample program, a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;test.db&lt;/span&gt;&lt;/tt&gt; file is created. You can use the SQLite command line utility to examine the file and make sure everything is as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;... path ... &amp;gt;sqlite3 test.db
SQLite version 3.6.14.2
Enter &amp;quot;.help&amp;quot; for instructions
Enter SQL statements terminated with a &amp;quot;;&amp;quot;
sqlite&amp;gt; .tables
episodes
sqlite&amp;gt; select * from episodes;
1|Cinnamon Babka2|
sqlite&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

    </content><category term="misc"></category><category term="C &amp; C++"></category><category term="Databases"></category></entry><entry><title>Storing BLOBs in a SQLite DB with Python/pysqlite</title><link href="https://eli.thegreenplace.net/2009/05/29/storing-blobs-in-a-sqlite-db-with-pythonpysqlite" rel="alternate"></link><published>2009-05-29T09:06:07-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2009-05-29:/2009/05/29/storing-blobs-in-a-sqlite-db-with-pythonpysqlite</id><summary type="html">
        &lt;p&gt;I must be looking in all the wrong places, but I haven't found many usable examples online of storing BLOBs in a SQLite database using Python. At least, not something that works with current versions of Python (2.5), &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pysqlite&lt;/span&gt;&lt;/tt&gt; (2.3.2) and SQLite (the version that comes installed â€¦&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;I must be looking in all the wrong places, but I haven't found many usable examples online of storing BLOBs in a SQLite database using Python. At least, not something that works with current versions of Python (2.5), &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pysqlite&lt;/span&gt;&lt;/tt&gt; (2.3.2) and SQLite (the version that comes installed with Python 2.5). Overall, there doesn't seem to be much good examples of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pysqlite&lt;/span&gt;&lt;/tt&gt; anywhere.&lt;/p&gt;
&lt;p&gt;So here's an example I cooked up after consulting with several sources and experimenting a little:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span style="color: #00007f; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00007f"&gt;sqlite3&lt;/span&gt; &lt;span style="color: #00007f; font-weight: bold"&gt;as&lt;/span&gt; &lt;span style="color: #00007f"&gt;sqlite&lt;/span&gt;

&lt;span style="color: #007f00"&gt;# Create a new in-memory DB and a cursor&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#&lt;/span&gt;
con = sqlite.connect(&lt;span style="color: #7f007f"&gt;&amp;#39;:memory:&amp;#39;&lt;/span&gt;)
cur = con.cursor()

&lt;span style="color: #007f00"&gt;# The table is named &amp;#39;frames&amp;#39;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;# The columns are: a running ID, and a data blob&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#&lt;/span&gt;
cur.execute(&lt;span style="color: #7f007f"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    create table frames (&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        id integer primary key,&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;        data blob)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style="color: #007f00"&gt;# Shove some data into the table. The data stored&lt;/span&gt;
&lt;span style="color: #007f00"&gt;# using the sqlite.Binary type, which means a BLOB.&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#&lt;/span&gt;
cur.execute(&lt;span style="color: #7f007f"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    insert into frames values (null, ?)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;,
    (sqlite.Binary(&lt;span style="color: #7f007f"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt; * &lt;span style="color: #007f7f"&gt;10&lt;/span&gt; + &lt;span style="color: #7f007f"&gt;&amp;#39;\x12&amp;#39;&lt;/span&gt;),))
cur.execute(&lt;span style="color: #7f007f"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style="color: #7f007f"&gt;    insert into frames values (null, ?)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;,
    (sqlite.Binary(&lt;span style="color: #7f007f"&gt;&amp;#39;\x01\x42\x55&amp;#39;&lt;/span&gt;),))

&lt;span style="color: #007f00"&gt;# Now read it back. When BLOBs are read, they&amp;#39;re&lt;/span&gt;
&lt;span style="color: #007f00"&gt;# converted to Python buffers of type &amp;#39;buffer&amp;#39;&lt;/span&gt;
&lt;span style="color: #007f00"&gt;#&lt;/span&gt;
&lt;span style="color: #00007f; font-weight: bold"&gt;for&lt;/span&gt; row &lt;span style="color: #0000aa"&gt;in&lt;/span&gt; cur.execute(&lt;span style="color: #7f007f"&gt;&amp;quot;select * from frames&amp;quot;&lt;/span&gt;):
    &lt;span style="color: #00007f; font-weight: bold"&gt;print&lt;/span&gt; row[&lt;span style="color: #007f7f"&gt;0&lt;/span&gt;], &lt;span style="color: #00007f"&gt;str&lt;/span&gt;(row[&lt;span style="color: #007f7f"&gt;1&lt;/span&gt;]).encode(&lt;span style="color: #7f007f"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)

cur.close()
con.close()
&lt;/pre&gt;&lt;/div&gt;

    </content><category term="misc"></category><category term="Databases"></category><category term="Python"></category></entry><entry><title>Database n00b</title><link href="https://eli.thegreenplace.net/2008/10/14/database-n00b" rel="alternate"></link><published>2008-10-14T11:57:40-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2008-10-14:/2008/10/14/database-n00b</id><summary type="html">
        &lt;p&gt;When it comes to databases, I'm a complete &lt;a class="reference external" href="http://en.wikipedia.org/wiki/N00b"&gt;n00b&lt;/a&gt;. It's strange, but in 10 years of programming, I've never really had to use them more than superficially &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;. This is probably because I've never done any serious web or enterprise programming. Anyway, sometimes I feel bad about this, because databases â€¦&lt;/p&gt;</summary><content type="html">
        &lt;p&gt;When it comes to databases, I'm a complete &lt;a class="reference external" href="http://en.wikipedia.org/wiki/N00b"&gt;n00b&lt;/a&gt;. It's strange, but in 10 years of programming, I've never really had to use them more than superficially &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;. This is probably because I've never done any serious web or enterprise programming. Anyway, sometimes I feel bad about this, because databases is one of those parts of basic know-how every programmer should know at least something about. Moreover, with today's powerful and free tools, learning databases is easier than ever.&lt;/p&gt;
&lt;p&gt;So I've decided to learn some more about real databases (DBMS). I want this tool to be in my toolbox the next time I have to do something.&lt;/p&gt;
&lt;p&gt;I'll begin with writing down why databases are needed at all. As any self-respecting n00b would ask - can't I just use flat files (i.e. comma-separated values ?)&lt;/p&gt;
&lt;p&gt;Well, no. Here's a partial list (inspired by &lt;a class="reference external" href="http://philip.greenspun.com/sql/introduction.html"&gt;this&lt;/a&gt;) of things you can't do with flat files &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt; and must use databases for.&lt;/p&gt;
&lt;div class="section" id="simultanous-access"&gt;
&lt;h3&gt;Simultanous access&lt;/h3&gt;
&lt;p&gt;When several processes want to access a database simultaneously (this happens all the time in web applications), a flat file is not good enough &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;. Suppose that two processes attempt to insert a new entry to the database at the same time. If it's just a file, one of the following scenarios can happen:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Both inserts succeed&lt;/li&gt;
&lt;li&gt;One of the inserts is lost&lt;/li&gt;
&lt;li&gt;Information from the two inserts is mixed together so that both are corrupted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, only (1) is acceptable, but with flat files (2) and (3) can (and will!) happen as well.&lt;/p&gt;
&lt;p&gt;A DBMS allows transparent simultaneous access to the database that keeps it in a consistent state, no matter which request came when. The implementations of this are various, from simple file locking (as done by SQLite) to more sophisticated in-process locking as done by full-fledged database servers such as MySQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transactions"&gt;
&lt;h3&gt;Transactions&lt;/h3&gt;
&lt;p&gt;Suppose that your database keeps money accounts for users (you don't have to run a bank, it can be an online fantasy game). A request arrived to transver $1,000 from John to Sally. You debit $1,000 from John, but before you have time to credit Sally, the power fails and your computer turns off. What state are the accounts in ? Can you be sure that it's consistent ? No. Depending on your flat-file structure and access method, it may be that Jonh now has $1,000 less in his account, but Sally didn't receive the money.&lt;/p&gt;
&lt;p&gt;Sure, if you're running an online game you can just blame it on the &amp;quot;very rare emergency&amp;quot; and work something out, but this excuse won't fly if you're running a real bank and was in the middle of transacting $1M from one corporation full of angry-and-eager lawyers to another.&lt;/p&gt;
&lt;p&gt;DBMSs implement transactions. This is far from simple to do correctly. See, for example, this &lt;a class="reference external" href="http://sqlite.org/atomiccommit.html"&gt;explanation&lt;/a&gt; from SQLite's documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-data"&gt;
&lt;h3&gt;Complex data&lt;/h3&gt;
&lt;p&gt;Keeping your grocery list in a database is perhaps an overkill, but real-world data is complex. Consider the database Wordpress keeps. There are posts, there are comments, and there are users. The posts table in the DB has about 20 columns. Comments are also quite complex and are linked to posts. The same with users. How do you keep so much inter-linked data in a simple flat-file. Managing it would be a nightmare. You might be tempted to split it to several inter-linked files (to simulate DB tables), but this would just make simultaneous access and transactions even more hard to manage.&lt;/p&gt;
&lt;p&gt;DBMSs hold data in row/column tables of data which can be inter-linked (rows from one table can be pointing to other tables).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="performance"&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Imagine that your flat-file database has grown really large. When you have to search it often for entries, a lot of time is spent, since searching in a flat-file database is essentially linear.&lt;/p&gt;
&lt;p&gt;DBMSs implement sophisticated indexing schemes to allow you maximal performance (as long as you structure your database in a reasonable manner).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decoupling"&gt;
&lt;h3&gt;Decoupling&lt;/h3&gt;
&lt;p&gt;Let's admit it, we've all implemented at least a few home-cooked flat-file &amp;quot;databases&amp;quot; in our career. Sometimes a simple file is just enough. But what about the formats of these files ? What about the code to access them ? If I've &amp;quot;invented&amp;quot; at least 10 flat-file formats and methods for reading them in my short career, how many such methods exist in the whole programming community ? A million ? More ?&lt;/p&gt;
&lt;p&gt;DBMSs allow decoupling the problem to different levels of abstraction:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A database is one level. You access it using SQL, a declarative DSL that is common to almost all popular DBMSs. All you have to learn is SQL, and you can switch DBMSs easily. Has your application overgrown SQLite and you must graduate to MySQL or Oracle ? Easy. As long as all your code stays above the SQL abstraction, the transition will be simple.&lt;/li&gt;
&lt;li&gt;The application is another level. Your code accesses the database using SQL, so you don't have to invent yet another format and a reader/writer for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;OK, now I've convinced myself that real databases have their uses. It's time to go and learn how to use them effectively. I will try to write down as much as possible in the blog, to help myself remember for future needs.&lt;/p&gt;
&lt;div align="center" class="align-center"&gt;&lt;img class="align-center" src="https://eli.thegreenplace.net/images/hline.jpg" style="width: 320px; height: 5px;" /&gt;&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A good example of superficial use is poking around the MySQL database Wordpress created for my blog.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That is, without writing part of a database engine in your application.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I have a great story to tell about this - how my friend and I implemented a dynamic website in Perl / CGI back in 1999, and how our use of &amp;quot;flat file&amp;quot; databases made us lose our data almost every day. But it's long, and perhaps I'll leave it for another post.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

    </content><category term="misc"></category><category term="Databases"></category></entry><entry><title>MySQL server installation woes</title><link href="https://eli.thegreenplace.net/2007/05/22/mysql-server-installation-woes" rel="alternate"></link><published>2007-05-22T13:07:00-07:00</published><updated>2022-10-04T14:08:24-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2007-05-22:/2007/05/22/mysql-server-installation-woes</id><summary type="html">
      &lt;p&gt;
While installing and configuring MySQL server (version 5) on my home PC (Windows), I ran into many small and annoying problems and gained some useful insights. This post shall be a protection from repeating these mistakes in the future.
      &lt;/p&gt;&lt;p&gt;

First of all, I downloaded the Windows auto-installer from MySQL's website â€¦&lt;/p&gt;</summary><content type="html">
      &lt;p&gt;
While installing and configuring MySQL server (version 5) on my home PC (Windows), I ran into many small and annoying problems and gained some useful insights. This post shall be a protection from repeating these mistakes in the future.
      &lt;/p&gt;&lt;p&gt;

First of all, I downloaded the Windows auto-installer from MySQL's website and ran through the installation. The server executable suitable for Windows XP machines is &lt;code&gt;mysqld-nt.exe&lt;/code&gt;, located in the &lt;code&gt;bin&lt;/code&gt; directory of the installation. It is designed to be run as a Windows service (background process). To register it as a service from the command line, run:
      &lt;/p&gt;

&lt;pre&gt;
mysqld-nt --install
&lt;/pre&gt;

&lt;p&gt;
This installs MySQL server as a service that will run every time Windows starts.
If you don't want that to happen, then open the Services configuration tool
(Control Panel -&gt; Administrative Tools -&gt; Services), find the MySQL service and
modify its Startup properties. This Services tool can then be used to manually
start and stop the service when needed. In any case, it is also possible to
start and stop the service quickly from the command line:
&lt;/p&gt;

&lt;pre&gt;
net start mysql
net stop mysql
&lt;/pre&gt;

&lt;p&gt;
More details about post-installation configuration (like setting the root
password) can be found in the &lt;a href="http://dev.mysql.com/doc/"&gt;MySQL
docs&lt;/a&gt;. Here I'll focus on the specific problem I ran to. 
&lt;/p&gt;

&lt;p&gt;
Once the server is up and running, it is easy to access it from the command
line, by calling:
&lt;/p&gt;
&lt;pre&gt;
mysql -u root -p
&lt;/pre&gt;

&lt;p&gt;
And entering the password. This command connects to 'localhost' by default,
which is what we need. However, creating and viewing databases via a
command-line tool isn't too convenient, so I was looking for a GUI to do that,
and found MySQL Administrator, which is part of MySQL GUI Tools, downloadable
from the MySQL website. However, after installing the tool I had a problem
connecting to the server - I kept getting the following error:
&lt;/p&gt;
&lt;pre&gt;
ERROR 2003: Can't connect to MySQL server (10061)
&lt;/pre&gt;

&lt;p&gt;
This was very annoying since I was able to connect via the command line, so why
not with a GUI ? What made the problem stranger is that I could use the GUI to
connect to online databases which were not on my PC. I googled a lot, did some
research, used &lt;code&gt;nmap&lt;/code&gt; and &lt;code&gt;mysqladmin&lt;/code&gt; to investigate how
the server runs and which ports it listens to. To cut a long story short:
&lt;/p&gt;

&lt;p&gt;
By default (at least in my installation), MySQL server is configured not to use
a TCP/IP connection but rather a local named pipe (which is called 'mysql',
BTW). The command line &lt;code&gt;mysql&lt;/code&gt; tool is aware of that and connects to
the server without any problems. However, to use MySQL Administrator, one has to
specify the exact connection details.
&lt;/p&gt;

&lt;p&gt;
You can ask MySQL Administrator to use the named pipe to connect (via Details in
the connection dialog), but I wanted to set up my server to listen to TCP (on
MySQL's default port - 3306). To do that, it is possible to modify settings in
the &lt;code&gt;my.ini&lt;/code&gt; configuration file. I'm sure the MySQL docs explain all
about that, though the file can get pretty complex. 
&lt;/p&gt;

&lt;p&gt;
Fortunately, on Windows at least, there's a simpler way. MySQL comes with a tool
named MySQLInstanceConfig, which can be found in the &lt;code&gt;bin&lt;/code&gt; directory
and in the folder MySQL creates in the Start menu. Using MySQLInstanceConfig, it
is possible to configure the MySQL server in a friendly manner. I asked it to
listen to port 3306 instead of a named pipe, and MySQL Administrator connected
successfully, allowing me to add and edit tables in my DB easily.
&lt;/p&gt;

Notes:
&lt;ul&gt;
	&lt;li&gt;If MySQL Administrator complains about setup of "InnoDB", this is tweakable in the MySQLInstanceConfig tool.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;mysqladmin version&lt;/code&gt; is a useful command to execute to see some information about the currently running MySQL server, including the port it listens to.&lt;/li&gt;
&lt;/ul&gt;

    </content><category term="misc"></category><category term="Databases"></category><category term="Software &amp; Tools"></category></entry></feed>